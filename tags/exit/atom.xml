<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag:exit | Pearls in Life]]></title>
  <link href="http://jhshi.me/tags/exit/atom.xml" rel="self"/>
  <link href="http://jhshi.me/"/>
  <updated>2013-04-03T20:23:35-04:00</updated>
  <id>http://jhshi.me/</id>
  <author>
    <name><![CDATA[Jinghao Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Console Input Messed up in OS161]]></title>
    <link href="http://jhshi.me/2013/03/15/console-input-messed-up-in-os161/"/>
    <updated>2013-03-15T00:26:57-04:00</updated>
    <id>http://jhshi.me/2013/03/15/console-input-messed-up-in-os161</id>
    <content type="html"><![CDATA[<p>When you finished the process system call (e.g., <code>fork</code>, <code>execv</code>) and test your
system call by executing some user program, you'll probably find that the
console input behavior is messed up.</p>

<!-- more -->


<p>For example, when you executing user shell from OS161 kernel menu, and then
executing <code>/bin/true</code> from the shell, you may see this</p>

<p><code>bash
OS/161 kernel [? for menu]: s
Operation took 0.000285120 seconds
OS/161 kernel [? for menu]: (program name unknown): Timing enabled.
OS/161$ /bin/true
(program name unknown): bntu: No such file or directory
(program name unknown): subprocess time: 0.063300440 seconds
Exit 1
</code></p>

<p>In this case, the shell program only receive the input "bnut" instead of your
input (<code>/bin/true</code>).</p>

<p>To find out why, we need to dig into how kernel menu (<code>$OS161_SRC/kern/startup/menu.c</code>)
works a little bit. When you hit "s" in the kernel menu. What happens?</p>

<ol>
<li><p><code>cmd_dispatch</code> will look up the <code>cmd_table</code> and call <code>cmd_shell</code></p></li>
<li><p><code>cmd_shell</code> just call <code>common_prog</code> with the shell path argument</p></li>
<li><p><code>common_prog</code> will first create a child thread with the start function
<code>cmd_progthread</code>, then return</p></li>
<li><p>In the child thread, <code>cmd_progthread</code> will try to run the actual program
(in our case, the shell)</p></li>
</ol>


<p>Note that the shell program is run in a separate child thread, and the parent
thread (i.e., the menu thread) will continue to run after he "forked" the child
thread.</p>

<p>So now there are actually two thread that want to read console input, which
leads to race condition. This is why the shell program receive corrupted input:
the menu thread eaten some of the inputs!</p>

<p>To solve this problem, we need to let the menu thread wait for the child
thread to complete, then return. So what we need to do is in <code>common_prog</code>, we
need to do a <code>waitpid</code> operation after we call <code>thread_fork</code>. And at the end of
<code>cmd_progthread</code>, we need to explicitly call <code>exit</code> with proper exit code in
case the user program doesn't do this.</p>

<p>Also note that <code>waitpid</code> and <code>exit</code> are in fact user land system call, and we can
not directly call them in kernel, so you may need to make some "shortcuts" in
your system call implementation to let the kernel be able to call <code>sys_waitpid</code>
and <code>sys_exit</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 exit and waitpid System Call]]></title>
    <link href="http://jhshi.me/2012/03/12/os161-exit-and-waitpid-system-call/"/>
    <updated>2012-03-12T11:51:46-04:00</updated>
    <id>http://jhshi.me/2012/03/12/os161-exit-and-waitpid-system-call</id>
    <content type="html"><![CDATA[<p>Before going on, assume you've read my previous post on <a href="/2012/03/12/os161-pid-management">pid management</a></p>

<p>Thanks to the <code>struct process</code>, our work is much simplified. Quoting <a href="http://en.wikipedia.org/wiki/Eric_S._Raymond">Eric S.Raymond </a>
here.</p>

<blockquote><p>Smart data structures and dumb code works a lot better than the other way
around.</p></blockquote>

<!-- more -->


<h3><code>sys_waitpid</code></h3>

<p>At first glance, the logic of <code>waitpid</code> is trivial. Yes, it's indeed in
terms of the "core code": Just acquire the exitlock and then see if the
process has exited, then wait it exit using <code>cv_wait</code> on exitcv and get
it's exitcode. But it turns out that most the code of <code>waitpid</code> is argument
checking! More arguments means more potential risks from user space.
Sigh~ Anyway, we are doing kernel programming. And just take a look at
<code>$OS161_SRC/user/testbin/badcall/bad_waitpid.c</code> and you'll know what I mean.</p>

<p>So basically, we need to check:</p>

<ul>
<li><p>Is the status pointer properly aligned (by 4) ?</p></li>
<li><p>Is the status pointer a valid pointer anyway (NULL, point to kernel, ...)?</p></li>
<li><p>Is options valid? (More flags than <code>WNOHANG | WUNTRACED</code> )</p></li>
<li><p>Does the waited pid exist/valid?</p></li>
<li><p>If exist, are we allowed to wait it ? (Is it our child?)</p></li>
</ul>


<p>And also, after successfully get the exitcode, don't forget to destroy the
child's process structure and free its slot in the procs array. Since one child
has only one parent, and after we wait for it, no one will care for it any
more!</p>

<h3><code>sys_exit</code></h3>

<p>This part is easy. (Mostly because exit only take on integer argument!) All
we need to do is find our <code>struct process</code> entry using <code>curthread-&gt;t_pid</code>.
And then indicate that "I've exited" and fill the exitcode. The only
thing to note that the exitcode must be maked using the MACROs in
<code>$OS161_SRC/kern/include/kern/wait.h</code>. Suppose user passing in <code>_exitcode</code>, then we need
to set the real exitcode as <code>_MKWVAL(_exitcode) | __WEXITED</code>.</p>

<p>And if we are smarter, we can first check if parent exist or if parent has
exited, then we even don't bother fill the exitcode since no one cares! Anyway,
it's just a tiny shortcut.</p>
]]></content>
  </entry>
  
</feed>
