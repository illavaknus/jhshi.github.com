<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pearls in Life]]></title>
  <link href="http://jhshi.me/atom.xml" rel="self"/>
  <link href="http://jhshi.me/"/>
  <updated>2013-04-05T16:36:07-04:00</updated>
  <id>http://jhshi.me/</id>
  <author>
    <name><![CDATA[Jinghao Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS161 Synchronization Primitives: RWLock]]></title>
    <link href="http://jhshi.me/2013/04/05/os161-synchronization-primitives-rwlock/"/>
    <updated>2013-04-05T13:30:00-04:00</updated>
    <id>http://jhshi.me/2013/04/05/os161-synchronization-primitives-rwlock</id>
    <content type="html"><![CDATA[<p>The idea of <a href="http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock">Reader-Writer Lock</a> is quite simple. In normal <a href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-lock">lock</a>,
we don&#8217;t differentiate the threads. That said, each thread who wants to enter the
critical section must first acquire the lock. But on a second thought, you may
find that threads actually have different behavior inside the critical section:
some threads just want to see the values of shared variable, while others really
want to update those variables.</p>

<!-- more -->


<h3>An Example</h3>

<p>Suppose we have a book database in a library, each reader who wants to query the
database must first acquire the lock before he can actually do the query. The
library manager, who wants to update some book info also need to acquire the
lock before he can do the actual update. In this case, we can see that the
queries of multiple readers in fact have no conflict. So ideally they should be
allowed to be in the critical section at the same time. On the other hand, the
library manager must have exclusive access to the database while he&#8217;s updating.
No readers, no other managers can enter the critical section until the first
manager leaves.</p>

<p>So, two rules for rwlock:</p>

<ol>
<li>Multiple readers can in the critical section at the same time</li>
<li>One and only one writers can in the critical section at any time</li>
</ol>


<h3>Starvation</h3>

<p>Suppose the coming sequence of threads are &#8220;RWRRRRR&#8230;&#8221;, in which R denotes reader
and W denotes writer. The first reader arrives, and found no one in the critical
section, and he happily comes in. Before he leaves, the writer arrives, but
found there is a reader inside the critical section, so the writer wait. While
the write is waiting, the second reader comes and find there is one reader
inside the critical section, literally, it&#8217;s OK for him to come in according to
the rules, right? The same case applies to the third, forth,&#8230;, readers.</p>

<p>So without special attention, we see readers come and go, while the poor writer
keeps waiting, for virtually a &#8220;unbounded&#8221; time. In this case, the writer is
starved.</p>

<p>The thing is, the second, third, forth&#8230;, readers shouldn&#8217;t enter critical section
since there is a write waiting before them!</p>

<h3>Implementation</h3>

<p>There are many ways to implement rwlock. You can use any of the semaphore, cv or
lock. Here I introduce one using semaphore and lock. It&#8217;s very simple, yet has
the limitation that only support support at most a  certain number of readers in
the critical section.</p>

<p>Let&#8217;s imagine the critical section as a set of resources. The initial capacity
is <code>MAX_READERS</code>. The idea is each reader needs one of these resources to enter
the critical section, while each writer needs all of these resources (to prevent other
readers or writers) to enter.</p>

<p>To let the readers be aware of the waiting writers, each thread should first
acquire a lock before he can acquire the resource.</p>

<p>So for <code>rwlock_acquire_read</code>:</p>

<ol>
<li>Acquire the lock</li>
<li>Acquire a resource using <code>P</code></li>
<li>Release the lock</li>
</ol>


<p>For <code>rwlock_release_read</code>, just release the resource using <code>V</code>.</p>

<p>In <code>rwlock_acquire_write</code>:</p>

<ol>
<li>Acquire the lock, so that no other readers/writer would be able to acquire
the rwlock</li>
<li>Acquire <strong>ALL</strong> the resources by doing <code>P</code> <code>MAX_READERS</code> times</li>
<li>Release the lock. It&#8217;s safe now since we got all the resources.</li>
</ol>


<p>For <code>rwlock_release_write</code>, just release all the resources.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Synchronization Primitives: CV]]></title>
    <link href="http://jhshi.me/2013/04/05/os161-synchronization-primitives-cv/"/>
    <updated>2013-04-05T12:37:00-04:00</updated>
    <id>http://jhshi.me/2013/04/05/os161-synchronization-primitives-cv</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Monitor_(synchronization)">Condition variable</a> is used for a thread to wait for some condition to be
true before continuing. The implementation is quite simple compared to
<a href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-lock">lock</a>, yet the difficult part is to understand how a CV is supposed to
used.</p>

<!-- more -->


<h3>CV Interface</h3>

<p>Condition variable has two interfaces: <code>cv_wait</code> and <code>cv_signal</code>. <code>cv_wait</code> is
used to wait for a condition to be true, and <code>cv_signal</code> is used to notify other
threads that a certain condition is true.</p>

<p>So what?</p>

<p>Let&#8217;s consider a producer-consumer case, where a bunch of threads share a
resource pool, some of them (producer) is responsible to put stuff to the pool
and others (consumer) are responsible to take stuff from the pool. Obviously, we
have two rules.</p>

<ol>
<li>If the pool is full, then producers can not put to the pool</li>
<li>If the pool is empty, then consumers can not take stuff from the pool</li>
</ol>


<p>And we use two condition variables for each of these rules: <code>pool_full</code> and
<code>pool_empty</code>. Here is the pseudo code for producer and consumer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">producer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lock_acquire</span><span class="p">(</span><span class="n">pool_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">pool_is_full</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cv_wait</span><span class="p">(</span><span class="n">pool_full</span><span class="p">,</span> <span class="n">pool_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">produce</span><span class="p">();</span>
</span><span class='line'>    <span class="cm">/* notify that the pool now is not empty, so if any one is waiting</span>
</span><span class='line'><span class="cm">     * on the pool_empty cv, wake them up </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">cv_signal</span><span class="p">(</span><span class="n">pool_empty</span><span class="p">,</span> <span class="n">pool_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="n">lock_release</span><span class="p">(</span><span class="n">pool_lock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">consumer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lock_acquire</span><span class="p">(</span><span class="n">pool_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">pool_is_empty</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cv_wait</span><span class="p">(</span><span class="n">pool_empty</span><span class="p">,</span> <span class="n">pool_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">consume</span><span class="p">();</span>
</span><span class='line'>    <span class="cm">/* notify that the pool now is not full, so if any one is waiting</span>
</span><span class='line'><span class="cm">     * on the pool_full cv, wake them up </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cv_signal</span><span class="p">(</span><span class="n">pool_full</span><span class="p">,</span> <span class="n">pool_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="n">lock_release</span><span class="p">(</span><span class="n">pool_lock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we also use a lock to protect access to the pool. We can see from this
example:</p>

<ol>
<li>Condition variable is virtually a wait channel</li>
<li>Condition variable is normally used together with lock, but <strong>condition
variable itself doesn&#8217;t contain a lock</strong></li>
</ol>


<h3>What&#8217;s in <code>cv</code> structure?</h3>

<p>Obviously, we need a wait channel. And that&#8217;s it (probably plus a <code>cv_name</code>).</p>

<h3><code>cv_wait</code> and <code>cv_signal</code></h3>

<p>Now let&#8217;s get to business. The comment in <code>$OS161_SRC/kern/inlucde/synch.h</code>
basically told you everything you need to do.</p>

<p>In <code>cv_wait</code>, we need to:</p>

<ol>
<li>Lock the wait channel</li>
<li>Release the lock passed in</li>
<li>Sleep on the wait channel</li>
<li>When waked up, re-acquire the lock.</li>
</ol>


<p>So before <code>cv_wait</code>, we should already hold the lock (so that we can release
it). And after <code>cv_wait</code>, we still hold the lock.</p>

<p>In <code>cv_signal</code>, we just wake up somebody in the wait channel using
<code>wchan_wakeone</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Synchronization Primitives: Lock]]></title>
    <link href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-lock/"/>
    <updated>2013-04-04T15:23:00-04:00</updated>
    <id>http://jhshi.me/2013/04/04/os161-synchronization-primitives-lock</id>
    <content type="html"><![CDATA[<p>Lock is basically just a semaphore whose initial counter is 1. <code>lock_acquire</code> is
like <code>P</code>, while <code>lock_release</code> is like <code>V</code>. You probably want to go over
<a href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-semaphore">my previous post about semaphore</a></p>

<!-- more -->


<h3>Lock&#8217;s holder</h3>

<p>However, since only one can hold the lock at any given time, that guy is
considered to be the <strong>holder</strong> of this lock. While in semaphore, we don&#8217;t have
such a holder concept since multiple thread can &#8220;hold&#8221; the semaphore at the same
time.</p>

<p>Thus we need to store the holder information in our lock structure, along with the
conventional spin lock and wait channel. Intuitively, you may tempted to use the
thread name (<code>curthread-&gt;t_name</code>) as the thread&#8217;s identifier. Nevertheless, same
with the case in real world, the thread&#8217;s name isn&#8217;t necessarily unique. The
OS161 doesn&#8217;t forbidden us to create a bunch of threads with the same name.</p>

<p>There is a global variable defined in <code>$OS161_SRC/kern/include/current.h</code> named
<code>curthread</code>, which is a pointer to the kernel data structure of current thread.
Two different threads definitely have different thread structures, which makes
it a good enough thread identifier.</p>

<h3>Reentrant Lock</h3>

<p>Another trick thing is to decide whether we support <a href="http://en.wikipedia.org/wiki/Reentrant_mutex">reentrant lock</a> or not.
Basically, a process can acquire a reentrant lock multiple times without
blocking itself.</p>

<p>At first glance, you may wonder what kind of dumb thread would acquire a lock
multiple times anyway? Well, that kind of thread does exist, and they may not be
dumb at all. Reentrant lock is useful when it&#8217;s difficult for a thread to track
whether it has grabbed the lock. Suppose we have multiple threads that traverse
a graph simultaneously, and each thread need to first grab the lock of a node
before it can visit that node. If the graph has a circle or there are multiple
paths leads to the same node, then it&#8217;s possible that a thread visit the same
node twice. Although there is a function named <code>lock_do_i_hold</code> that can tell
whether a thread holds a lock or not, unfortunately it&#8217;s not a public interface of lock.</p>

<p>In OS161, it&#8217;s OK that you choose to not support reentrant lock, so when you
detect a thread try to acquire a lock while it&#8217;s the lock&#8217;s holder, just panic.
But if you want to support reentrant lock, <strong>you need to make sure a thread won&#8217;t
accidentally loose a lock.</strong> For example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">A</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lock_acquire</span><span class="p">(</span><span class="n">lock1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">B</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lock_release</span><span class="p">(</span><span class="n">lock1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">B</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lock_acquire</span><span class="p">(</span><span class="n">lock1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello world!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lock_release</span><span class="p">(</span><span class="n">lock1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the thread is supposed to still hold the lock <strong>after</strong> B
returns.</p>

<p>The simplest way would be, keep a counter (initial value 0) for each lock. When
a thread acquires a lock, increase that counter. When it release the lock, decrease
the counter, only actually release a lock when the counter reaches 0.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Synchronization Primitives: Semaphore]]></title>
    <link href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-semaphore/"/>
    <updated>2013-04-04T14:52:00-04:00</updated>
    <id>http://jhshi.me/2013/04/04/os161-synchronization-primitives-semaphore</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Semaphore_(programming)">Semaphore</a> denotes a certain number of shared resources. Basically, it&#8217;s
one counter and two operations on this counter, namely <code>P</code> and <code>V</code>. <code>P</code> is used
to acquire one resource (thus decrementing the counter) while <code>V</code> is used to
release one resource (thus incrementing the counter).</p>

<!-- more -->


<h3>A Metaphor</h3>

<p>My favorite example is the printer. Say we have three printers in a big lab,
where everybody in the lab shared those printers. Obviously only one printing
job can be conducted by one printer at any time, otherwise, the printed content
would be messed up.</p>

<p>However, we can not use a single lock to protect the access of all these three
printers. It&#8217;ll be very dumb. An intuitive way is to use three locks, one for
each printer. Yet more elegantly, we use a semaphore with initial counter as 3.
Every time before a user submit a print job, he need to first <code>P</code> this semaphore
to acquire one printer. And after he is done, he need to <code>V</code> this semaphore to
release the printer. If there is already one print job at each printer, then the
following poor guys who want to <code>P</code> this semaphore would have to wait.</p>

<h3>What should a semaphore structure contain?</h3>

<p>Apparently, we need an <strong>counter</strong> to record how many resources available. Since
this counter is a shared variable, we need a <strong>lock</strong> to protect it. At this point,
we only have the <code>spinlock</code> provided in <code>$OS161_SRC/kern/include/spinlock.h</code>.
That&#8217;s fine since our critical section is short anyway. In order to let the poor
guys have a place to wait, we also need an <strong>wait channel</strong> (in
<code>OS161_SRC/kern/include/wchan.h</code>)</p>

<h3><code>P</code> Operation</h3>

<p>The flow of <code>P</code> would be:</p>

<ol>
<li>Acquire the spin lock</li>
<li>Check if there are some resources available (<code>counter &gt; 0</code>)</li>
<li>If yes, we&#8217;re lucky. Happily go to step 8.</li>
<li>If no, then we first grab the lock of the wait channel, since the wait
channel is also shared.</li>
<li>Release the spin lock, and wait on the wait channel by calling <code>wchan_sleep</code></li>
<li>We&#8217;re sleeping&#8230;</li>
<li>After wake up, first grab the spin lock, and go to step 2</li>
<li>At this point, the <code>counter</code> should be positive, decrement it by 1</li>
<li>Release the spin lock, and return</li>
</ol>


<h3><code>V</code> Operation</h3>

<p><code>V</code> is much simpler compared to <code>P</code>. The flow is:</p>

<ol>
<li>Acquire the spin lock</li>
<li>Increment the <code>counter</code> by 1</li>
<li>Wake up some poor guy in the wait channel by calling <code>wchan_wakeone</code>)</li>
<li>Release the spin lock and return</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimium Not Working in Google Search Results Page]]></title>
    <link href="http://jhshi.me/2013/03/15/vimium-not-working-in-google-search-results-page/"/>
    <updated>2013-03-15T02:50:16-04:00</updated>
    <id>http://jhshi.me/2013/03/15/vimium-not-working-in-google-search-results-page</id>
    <content type="html"><![CDATA[<p>If you&#8217;re Vim user, then you must try <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en">Vimium</a>. It makes your browsing
much much comfortable!</p>

<!-- more -->


<p>These days, I found that Vimium commands (<code>j</code>, <code>k</code>, <code>f</code>) don&#8217;t work on Google search
results page. But works just in in any other pages. I tried turning the instant
search off, logging out my account in Google&#8217;s homepage, turning of personalized
search results, etc. None of those work.</p>

<p>Then I found that Vimium only stop working if I use Chrome&#8217;s Omnibox to search.
That is, if I do the search in Google&#8217;s home page instead of Chrome&#8217;s Omnibox,
then everything is fine. I suspect that some extra flags in Omnibox&#8217;s default
search pattern is the reason why Vimium refused to work.</p>

<p>But Omnibox is so convenience to use (<code>Alt+D</code> to focus &amp; search). Opening
Google&#8217;s homepage every time you need search will certainly be another pain. So
I changed the default behavior of Chrome&#8217;s Omnibox. Unfortunately, the built-in
Google search pattern is unchangeable, so I added an new search engine entry
and set it as default. Here is the fields of the new entry:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Name: Google (or whatever you want) 
</span><span class='line'>Keyword: Google (or whatever you want) 
</span><span class='line'>Search Pattern: http://www.google.com/search?q=%s </span></code></pre></td></tr></table></div></figure>


<p>Here is a more detailed information about Google&#8217;s search URL. Add whatever you
need, but keep it minimal, in case you screwed up with Vimium again :-)</p>

<p><a href="http://www.blueglass.com/blog/google-search-url-parameters-query-string-anatomy/">http://www.blueglass.com/blog/google-search-url-parameters-query-string-anatomy/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console Input Messed up in OS161]]></title>
    <link href="http://jhshi.me/2013/03/15/console-input-messed-up-in-os161/"/>
    <updated>2013-03-15T00:26:57-04:00</updated>
    <id>http://jhshi.me/2013/03/15/console-input-messed-up-in-os161</id>
    <content type="html"><![CDATA[<p>When you finished the process system call (e.g., <code>fork</code>, <code>execv</code>) and test your
system call by executing some user program, you&#8217;ll probably find that the
console input behavior is messed up.</p>

<!-- more -->


<p>For example, when you executing user shell from OS161 kernel menu, and then
executing <code>/bin/true</code> from the shell, you may see this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>OS/161 kernel <span class="o">[</span>? <span class="k">for </span>menu<span class="o">]</span>: s
</span><span class='line'>Operation took 0.000285120 seconds
</span><span class='line'>OS/161 kernel <span class="o">[</span>? <span class="k">for </span>menu<span class="o">]</span>: <span class="o">(</span>program name unknown<span class="o">)</span>: Timing enabled.
</span><span class='line'>OS/161<span class="nv">$ </span>/bin/true
</span><span class='line'><span class="o">(</span>program name unknown<span class="o">)</span>: bntu: No such file or directory
</span><span class='line'><span class="o">(</span>program name unknown<span class="o">)</span>: subprocess <span class="nb">time</span>: 0.063300440 seconds
</span><span class='line'>Exit 1
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the shell program only receive the input &#8220;bnut&#8221; instead of your
input (<code>/bin/true</code>).</p>

<p>To find out why, we need to dig into how kernel menu (<code>$OS161_SRC/kern/startup/menu.c</code>)
works a little bit. When you hit &#8220;s&#8221; in the kernel menu. What happens?</p>

<ol>
<li><p><code>cmd_dispatch</code> will look up the <code>cmd_table</code> and call <code>cmd_shell</code></p></li>
<li><p><code>cmd_shell</code> just call <code>common_prog</code> with the shell path argument</p></li>
<li><p><code>common_prog</code> will first create a child thread with the start function
<code>cmd_progthread</code>, then return</p></li>
<li><p>In the child thread, <code>cmd_progthread</code> will try to run the actual program
(in our case, the shell)</p></li>
</ol>


<p>Note that the shell program is run in a separate child thread, and the parent
thread (i.e., the menu thread) will continue to run after he &#8220;forked&#8221; the child
thread.</p>

<p>So now there are actually two thread that want to read console input, which
leads to race condition. This is why the shell program receive corrupted input:
the menu thread eaten some of the inputs!</p>

<p>To solve this problem, we need to let the menu thread wait for the child
thread to complete, then return. So what we need to do is in <code>common_prog</code>, we
need to do a <code>waitpid</code> operation after we call <code>thread_fork</code>. And at the end of
<code>cmd_progthread</code>, we need to explicitly call <code>exit</code> with proper exit code in
case the user program doesn&#8217;t do this.</p>

<p>Also note that <code>waitpid</code> and <code>exit</code> are in fact user land system call, and we can
not directly call them in kernel, so you may need to make some &#8220;shortcuts&#8221; in
your system call implementation to let the kernel be able to call <code>sys_waitpid</code>
and <code>sys_exit</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Ant Exec task for Linux Shell Commands]]></title>
    <link href="http://jhshi.me/2013/02/26/use-ant-exec-task-for-linux-shell-commands/"/>
    <updated>2013-02-26T22:59:02-05:00</updated>
    <id>http://jhshi.me/2013/02/26/use-ant-exec-task-for-linux-shell-commands</id>
    <content type="html"><![CDATA[<p>Suppose we use cscope and/or ctags for indexing source code of our Java project
and we want to update the meta data files (e.g. cscope.out, tags) each time
after we compile. We can use the <code>--post-comile</code> target to accomplish this.
Create a <code>custom_rules.xml</code> in your project root directory with the following
content. This file will be included to your main build.xml file.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project&gt;</span>
</span><span class='line'>    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;-post-compile&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exec</span> <span class="na">executable=</span><span class="s">&quot;find&quot;</span> <span class="na">failonerror=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;arg</span> <span class="na">line=</span><span class="s">&quot; . -name *.java&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;redirector</span> <span class="na">output=</span><span class="s">&quot;cscope.files&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exec&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exec</span> <span class="na">executable=</span><span class="s">&quot;cscope&quot;</span> <span class="na">failonerror=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;arg</span> <span class="na">line=</span><span class="s">&quot;-RUbq&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exec&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exec</span> <span class="na">executable=</span><span class="s">&quot;ctags&quot;</span> <span class="na">failonerror=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;arg</span> <span class="na">line=</span><span class="s">&quot;-R .&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exec&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we create one task, namely <code>exec</code> task, to execute our commands. Pay
special attention to our first command, <code>find</code>. More specifically, how we
redirect the output here. The normal bash redirect symbol <code>&gt;</code> doesn&#8217;t not work
here.</p>

<p>Reference:</p>

<ul>
<li><a href="http://ant.apache.org/manual/using.html">http://ant.apache.org/manual/using.html</a></li>
<li><a href="http://ant.apache.org/manual/Tasks/exec.html">http://ant.apache.org/manual/Tasks/exec.html</a></li>
<li><a href="http://ant.apache.org/manual/Types/redirector.html">http://ant.apache.org/manual/Types/redirector.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclim E218 When Open a File in New Tab]]></title>
    <link href="http://jhshi.me/2013/02/26/eclim-e218-when-open-a-file-in-new-tab/"/>
    <updated>2013-02-26T02:24:45-05:00</updated>
    <id>http://jhshi.me/2013/02/26/eclim-e218-when-open-a-file-in-new-tab</id>
    <content type="html"><![CDATA[<p>In the directory sub window, when I use <code>T</code> to open a file in new tab, the
following error message will occur:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>No matching autocommands
</span><span class='line'>Error detected while processing function eclim#project#tree#ProjectTree..eclim#project#tree#ProjectTreeOpen..eclim#display#window#VerticalToolWindowOpen:
</span><span class='line'>line 78:
</span><span class='line'>E218: autocommand nesting too deep
</span><span class='line'>Error detected while processing function 53_OpenFile..eclim#tree#ExecuteAction:
</span><span class='line'>line 12:
</span><span class='line'>E171: Missing :endif
</span><span class='line'>Error detected while processing function 53_OpenFile:
</span><span class='line'>line 8:
</span><span class='line'>E171: Missing :endif</span></code></pre></td></tr></table></div></figure>


<p>To fix this, apply the following patch to <code>$HOME/.vim/eclim/plugin/project.vim</code>
described in <a href="https://github.com/ervandew/eclim/commit/597aeb31fa4ea1e2c102547871935dbb89cf9202">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cscope INSIDE Vim]]></title>
    <link href="http://jhshi.me/2013/02/20/using-cscope-inside-vim/"/>
    <updated>2013-02-20T23:35:58-05:00</updated>
    <id>http://jhshi.me/2013/02/20/using-cscope-inside-vim</id>
    <content type="html"><![CDATA[<p>The goal we want to accomplish here is, jumping to a function definition (maybe
in another file,) finding out where a symbol is defined, finding out what
function(s) call current function and what functions are called from this
function, ALL WITHOUT LEAVING VIM.</p>

<!-- more -->


<p>First, make sure you have <code>cscope</code> installed by issuing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cscope --version
</span></code></pre></td></tr></table></div></figure>


<p>If bash complains &#8220;command not find&#8221;, then install <code>cscope</code>. In Ubuntu, the
command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install cscope
</span></code></pre></td></tr></table></div></figure>


<p>Then, we need to generate <code>cscope</code> database. If you&#8217;re dealing with C files,
then in the root directory of the source tree, using this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cscope -RUbq
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re dealing with Java files, before generating the database, we need to
tell <code>cscope</code> tracing which files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find . -name *.java &gt; cscope.files
</span><span class='line'><span class="nv">$ </span>cscope -RUbq
</span></code></pre></td></tr></table></div></figure>


<p>The explanations are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-R: Recurse subdirectories during search <span class="k">for </span><span class="nb">source </span>files.
</span><span class='line'>-U: Check file <span class="nb">time </span>stamps. This option will update the <span class="nb">time </span>stamp on the database even <span class="k">if </span>no files have changed.
</span><span class='line'>-b: Build the cross-reference only. We don<span class="err">&#39;</span>t want the interactive mode.
</span><span class='line'>-q: Enable fast symbol lookup via an inverted index
</span></code></pre></td></tr></table></div></figure>


<p>For more details, consult the <code>cscope</code> manual:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>man cscope
</span></code></pre></td></tr></table></div></figure>


<p>After this step, several <code>cscope</code> database files will be generated. If you&#8217;re
using git or hg to manage your code, you may want to ignore them in the git/hg
repository. Do that by adding these lines into your .gitignore/.hgignore</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cscope.*
</span></code></pre></td></tr></table></div></figure>


<p>Then we need to tell Vim how to interact with <code>cscope</code>. Add the following lines
into your <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>has<span class="o">(</span><span class="s2">&quot;cscope&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nb">set </span><span class="nv">csprg</span><span class="o">=</span>/usr/bin/cscope
</span><span class='line'>    <span class="nb">set </span><span class="nv">csto</span><span class="o">=</span>0
</span><span class='line'>    <span class="nb">set </span>cst
</span><span class='line'>    <span class="nb">set </span>csverb
</span><span class='line'>    <span class="s2">&quot; C symbol</span>
</span><span class='line'><span class="s2">    nmap &lt;C-\&gt;s :cs find s &lt;C-R&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;CR&gt;&lt;CR&gt;</span>
</span><span class='line'><span class="s2">    &quot;</span> definition
</span><span class='line'>    nmap &lt;C-<span class="se">\&gt;</span>g :cs find g &lt;C-R&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;CR&gt;&lt;CR&gt;
</span><span class='line'>    <span class="s2">&quot; functions that called by this function</span>
</span><span class='line'><span class="s2">    nmap &lt;C-\&gt;d :cs find d &lt;C-R&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;CR&gt;&lt;CR&gt;</span>
</span><span class='line'><span class="s2">    &quot;</span> funtions that calling this <span class="k">function</span>
</span><span class='line'><span class="k">    </span>nmap &lt;C-<span class="se">\&gt;</span>c :cs find c &lt;C-R&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;CR&gt;&lt;CR&gt;
</span><span class='line'>    <span class="s2">&quot; test string</span>
</span><span class='line'><span class="s2">    nmap &lt;C-\&gt;t :cs find t &lt;C-R&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;CR&gt;&lt;CR&gt;</span>
</span><span class='line'><span class="s2">    &quot;</span> egrep pattern
</span><span class='line'>    nmap &lt;C-<span class="se">\&gt;</span>e :cs find e &lt;C-R&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;CR&gt;&lt;CR&gt;
</span><span class='line'>    <span class="s2">&quot; file</span>
</span><span class='line'><span class="s2">    nmap &lt;C-\&gt;f :cs find f &lt;C-R&gt;=expand(&quot;</span>&lt;cfile&gt;<span class="s2">&quot;)&lt;CR&gt;&lt;CR&gt;</span>
</span><span class='line'><span class="s2">    &quot;</span> files <span class="c">#including this file</span>
</span><span class='line'>    nmap &lt;C-<span class="se">\&gt;</span>i :cs find i ^&lt;C-R&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cfile&gt;&quot;</span><span class="o">)</span>&lt;CR&gt;<span class="nv">$&lt;</span>CR&gt;
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot; Automatically make cscope connections</span>
</span><span class='line'><span class="s2">    function! LoadCscope()</span>
</span><span class='line'><span class="s2">        let db = findfile(&quot;</span>cscope.out<span class="s2">&quot;, &quot;</span>.;<span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">        if (!empty(db))</span>
</span><span class='line'><span class="s2">            let path = strpart(db, 0, match(db, &quot;</span>/cscope.out<span class="s2">$&quot;))</span>
</span><span class='line'><span class="s2">            set nocscopeverbose &quot;</span> suppress <span class="s1">&#39;duplicate connection&#39;</span> error
</span><span class='line'>            exe <span class="s2">&quot;cs add &quot;</span> . db . <span class="s2">&quot; &quot;</span> . path
</span><span class='line'>            <span class="nb">set </span>cscopeverbose
</span><span class='line'>        endif
</span><span class='line'>    endfunction
</span><span class='line'>    au BufEnter /* call LoadCscope<span class="o">()</span>
</span><span class='line'>
</span><span class='line'>endif
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re done! Now using Vim to edit a source code file. Put the cursor on a
symbol (variable, function, etc.), First press <code>Ctrl+\</code>, then press:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>s: find all appearance of this symbol
</span><span class='line'>g: go to the definition of this symbol
</span><span class='line'>d: functions that called by this <span class="k">function</span>
</span><span class='line'>c: functions that calling this <span class="k">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more details about <code>cscope</code>, inside Vim, press <code>:h cs</code> to see the help
message of <code>cscope</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFS 6.9.1: command substitution: line 3: syntax error near unexpected token  `)']]></title>
    <link href="http://jhshi.me/2012/09/18/lfs-6-9-1-command-substitution-line-3-syntax-error-near-unexpected-token/"/>
    <updated>2012-09-18T14:57:23-04:00</updated>
    <id>http://jhshi.me/2012/09/18/lfs-6-9-1-command-substitution-line-3-syntax-error-near-unexpected-token</id>
    <content type="html"><![CDATA[<p>I encountered this error when compiling glibc. The apparent cause is that
bash can not deal with brackets correctly. So even a simple command like echo
<code>$(ls)</code> will fail with the same error (command substitution).</p>

<!-- more -->


<p>The most suspicious cause is that when compile bash in section 5.15.1, I use
<code>byacc</code> for walk around when the compiler complained the absence of <code>yacc</code>. <strong>Bash
uses yacc grammer rules and only GNU bison will generate the correct parsing
code for the bash build</strong>. So I un-installed byacc and installed bison. Then</p>

<ul>
<li><p>Make a soft link at <code>/usr/bin/yacc</code> to bison</p></li>
<li><p>Recompile all the package after 5.10 (tcl) and before 5.15 (include 5.15)</p></li>
<li><p>Test if problem solved using echo <code>$(ls)</code> command</p></li>
<li><p>If yes, then using <code>/tools/bin/bash --login +h</code> to lunch the new bash</p></li>
</ul>


<p>Also see:</p>

<ul>
<li><a href="http://www.mail-archive.com/lfs-support@linuxfromscratch.org/msg16549.html">http://www.mail-archive.com/lfs-support@linuxfromscratch.org/msg16549.html</a></li>
<li><a href="http://unix.stackexchange.com/questions/28369/linux-from-scratchs-bash-problem-syntax-error">http://unix.stackexchange.com/questions/28369/linux-from-scratchs-bash-problem-syntax-error</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFS 5.5.1: Change GCC's Stack Protection Option]]></title>
    <link href="http://jhshi.me/2012/09/08/change-gccs-stack-protection-option-in-lfs/"/>
    <updated>2012-09-08T11:39:27-04:00</updated>
    <id>http://jhshi.me/2012/09/08/change-gccs-stack-protection-option-in-lfs</id>
    <content type="html"><![CDATA[<p>In <a href="http://www.linuxfromscratch.org/lfs/view/stable/chapter05/gcc-pass1.html">Chapter 5.5</a>, there is one step that fixes the GCC&#8217;s stack protection
detection problem. The command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i <span class="s1">&#39;/k prot/agcc_cv_libc_provides_ssp=yes&#39;</span> gcc/configure
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>This command seems weird to me at first glance. After digging a little more
about <code>sed</code> command, it&#8217;s intention is much clear.</p>

<ul>
<li><p><strong>-i</strong> means change the file (i.e., <code>gcc/configure</code>) in place</p></li>
<li><p><strong>/k prot/</strong> is the pattern. If you look at <code>gcc/configure</code>, you&#8217;ll find a
line (around 26695) of comment that says:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Test for stack protector support in target C library</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you&#8217;ll see that this is the only occurrence of &#8220;stack protector&#8221; (as well
as <code>k prot</code>. I think we&#8217;d better use <code>/stack protector/</code> as the pattern for
easy understanding.</p>

<ul>
<li><p><strong>a</strong> means append a line after the line that contains the pattern. (<a href="http://www.grymoire.com/Unix/Sed.html#uh-40">sed document</a>)</p></li>
<li><p><strong>gcc_cv_libc_provides_ssp=yes</strong> is the actual line being appended.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use rsync and cron to do regular backup (Part II)]]></title>
    <link href="http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-ii/"/>
    <updated>2012-07-11T12:53:52-04:00</updated>
    <id>http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-ii</id>
    <content type="html"><![CDATA[<p>Now that we can <a href="http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i">take advantage of rsync to minimize the data to transfer when
backup</a>. But it&#8217;s still a little uncomfortable if we need to do this manually
everyday, right? Well, cron is here to solve the pain.</p>

<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Cron">Cron</a> is kind of a system service that
automatically do some job as you specified. Backup, for example, is a perfect
kind of job that we can count on cron.</p>

<p>First, we need to specify a job that we want cron to do. In my case, I want
cron to automatically sync my source tree folder on remote data center and my
local backup folder. A simple rsync command seems meet my need. But actually,
there are more to consider:</p>

<ul>
<li><p>I don&#8217;t want to copy the obj files, since they are normally large in size
and change frequently, but can be easily re-generated. But I also don&#8217;t want to
skip the entire build folder when do rsync since there are some configure files
in there.</p></li>
<li><p>The backup process should be totally automated. More specifically, no
password is needed when do rysnc.</p></li>
</ul>


<p>Towards the first need, I can use ssh to send remote command to
do necessary clean up work before rysnc. And the second need can
be meted according to my previous post about <a href="http://jhshi.me/2012/04/27/sshscp-without-password">ssh/scp without password</a>.</p>

<p>So my final backup script looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh </span>
</span><span class='line'><span class="c"># ~/backup.sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">LOG_FILE</span><span class="o">=</span>~/backup.log
</span><span class='line'><span class="nv">SOURCE_DIR</span><span class="o">=</span>b@B:~/src/
</span><span class='line'><span class="nv">TARGET_DIR</span><span class="o">=</span>~/src_backup
</span><span class='line'>
</span><span class='line'>date &gt;&gt; <span class="nv">$LOG_FILE</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Synchronization start...&quot;</span> &gt;&gt; <span class="nv">$LOG_FILE</span>
</span><span class='line'>ssh b@B <span class="err">&#39;</span><span class="nb">cd</span> ~/src/build; make clean; rm -rf obj/<span class="s2">&quot; &gt;&gt; $LOG_FILE </span>
</span><span class='line'><span class="s2">rsync -avz --exclude &quot;</span>tags<span class="s2">&quot; $SOURCE_DIR $TARGET_DIR &gt;&gt; $LOG_FILE </span>
</span><span class='line'><span class="s2">echo &quot;</span>Synchronization <span class="k">done</span><span class="err">&quot;</span> &gt;&gt; <span class="nv">$LOG_FILE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we figure out what to do, we need to tell cron about our job. The
configure file of cron is <code>/etc/crontab</code>. A job description is like follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Example of job definition: </span>
</span><span class='line'><span class="c"># .----------------minute (0 - 59) </span>
</span><span class='line'><span class="c"># | .------------- hour (0 - 23) </span>
</span><span class='line'><span class="c"># | | .---------- day of month (1 - 31) </span>
</span><span class='line'><span class="c"># | | | .------- month (1 - 12) OR jan,feb,mar,apr ... </span>
</span><span class='line'><span class="c"># | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat </span>
</span><span class='line'><span class="c"># | | | | | </span>
</span><span class='line'><span class="c"># * * * * * user-name command to be executed 0 0 * * * jack ~/backup.sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want to do backup every day on midnight so I set the minute and hour both to
0. The asterisk (<code>*</code>) symbol in day/month means any valid values.</p>

<p>Now we are done. The back up process is completely automated and scheduled.</p>

<p><strong>Reference</strong>:</p>

<p><a href="http://myhowtosandprojects.blogspot.hk/2008/07/sincronize-folders-with-rsync-using-ssh.html">http://myhowtosandprojects.blogspot.hk/2008/07/sincronize-folders-with-rsync-using-ssh.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use rsync and cron to do regular backup (Part I)]]></title>
    <link href="http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i/"/>
    <updated>2012-07-11T12:23:45-04:00</updated>
    <id>http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i</id>
    <content type="html"><![CDATA[<p>Recently I do most of my work on a remote data center through a slow network
connection (&lt;100KB/sec). I usually backup my project source tree as follows.
I first do make clean and also delete any unnecessary obj files to shrink the
total file size, then I compress the whole source tree as a tar ball and then I
use <code>scp</code> locally to fetch the backup tar ball to my local machine. The procedure
is quite boring since I need to do this every day before I go home, otherwise
the whole bandwidth will be occupied for near an hour during which I can almost
do nothing.</p>

<p>Situation gets better when I find <code>rsync</code> and <code>cron</code>. Here is how I do automatic
regular (daily) backup with them.</p>

<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Rsync">Rsync</a> is a file synchronization tool
that aims to minimize the data transfer during copy files. This is done via
only send the diffs to destination. It is perfect when you need to do regular
copy between two fixed locations. Rsync has many options (well, as most of
other GNU tools), here is two of them that are used more frequently:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ensure that symbolic links, devices, attributes, permissions, </span>
</span><span class='line'><span class="c"># ownerships, etc are preserved in the transfer </span>
</span><span class='line'>-a, --archive
</span><span class='line'>
</span><span class='line'><span class="c">#compress data during transfer, especially useful when the bandwidth is limited</span>
</span><span class='line'>-z, --compress
</span><span class='line'>
</span><span class='line'><span class="c"># exclude the directories or files that you don&#39;t want to sync, such as obj</span>
</span><span class='line'><span class="c"># files, tag files, etc </span>
</span><span class='line'>--exclude
</span></code></pre></td></tr></table></div></figure>


<p>Suppose that you have a source tree on host B: <code>~/src</code>, and you want to sync this
source tree with a local folder named: <code>~/src_backup</code>, then the follow command
will suffice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rsync -avz --exclude <span class="s2">&quot;obj/&quot;</span> --exclude <span class="s2">&quot;tags&quot;</span> --exclude <span class="s2">&quot;build&quot;</span> b@B:~/src/ ~/src_backup
</span></code></pre></td></tr></table></div></figure>


<p>The two exclude option will tell rsync to skip the obj subdirectory as well
as the tags file. The trailing slash in the source (<code>b@B:~/src/</code>) will tell
rsync not to create an additional directory level at the destination. Without
this slash, rsync will create a <code>src</code> directory under <code>~/src_backup</code>, which is not
desirable.</p>

<p>Now that after the first time rsync, the following rsync commands will only
transfer the file changes to local, which is a great save of the bandwidth.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox: Unable to monitor filesystem]]></title>
    <link href="http://jhshi.me/2012/07/11/dropbox-unable-to-monitor-filesystem/"/>
    <updated>2012-07-11T11:39:14-04:00</updated>
    <id>http://jhshi.me/2012/07/11/dropbox-unable-to-monitor-filesystem</id>
    <content type="html"><![CDATA[<p>Sometime this error occurs that says:</p>

<blockquote><p>&#8220;Unable to monitor file system. Please run: echo 100000 | sudo tee
/proc/sys/fs/inotify/max_user_watches and restart Dropbox to correct the
problem.</p></blockquote>

<!-- more -->


<p>We need to adjust the system setting on the maximum file number that Dropbox
can watch.</p>

<p>The following command will solve your pain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>fs.inotify.max_user_watches<span class="o">=</span>100000 | sudo tee -a /etc/sysctl.conf; sudo sysctl -p
</span></code></pre></td></tr></table></div></figure>


<p>Here is the tip from Dropbox website.</p>

<p><a href="https://www.dropbox.com/help/145/en](https://www.dropbox.com/help/145/en">https://www.dropbox.com/help/145/en](https://www.dropbox.com/help/145/en</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh error: Agent admitted failure to sign using the key]]></title>
    <link href="http://jhshi.me/2012/07/11/ssh-error-agent-admitted-failure-to-sign-using-the-key/"/>
    <updated>2012-07-11T10:37:38-04:00</updated>
    <id>http://jhshi.me/2012/07/11/ssh-error-agent-admitted-failure-to-sign-using-the-key</id>
    <content type="html"><![CDATA[<p>If you follow <a href="http://jhshi.me/2012/04/27/sshscp-without-password/">my previous post about ssh/scp without password</a>, but you
got this error when you try to ssh to B on A, then you need to add RSA or DSA
identities to the authentication agent. A ssh-add command on host A will solve
your pain.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-add
</span><span class='line'><span class="c"># Sample output</span>
</span><span class='line'>Identity added: /home/jack/.ssh/id_rsa <span class="o">(</span>/home/jack/.ssh/id_rsa<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Reference</strong></p>

<p><a href="http://www.cyberciti.biz/faq/unix-appleosx-linux-bsd-agent-admitted-failuretosignusingkey/">http://www.cyberciti.biz/faq/unix-appleosx-linux-bsd-agent-admitted-failuretosignusingkey/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specify graphics path in Latex]]></title>
    <link href="http://jhshi.me/2012/06/22/specify-graphicspath-in-latex/"/>
    <updated>2012-06-22T09:34:33-04:00</updated>
    <id>http://jhshi.me/2012/06/22/specify-graphicspath-in-latex</id>
    <content type="html"><![CDATA[<p>We can use the <code>graphicx</code> package together with the <code>graphicspath</code> command to
specify the looking up path for pictures. A typical structure may look like
this:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\usepackage</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span><span class='line'><span class="c">% Must use this command BEFORE you begin document!</span>
</span><span class='line'><span class="k">\graphicspath</span><span class="nb">{{</span>pic<span class="nb">_</span>path1/<span class="nb">}{</span>pic<span class="nb">_</span>path2<span class="nb">}}</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'><span class="c">% some content</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the syntax of <code>graphicspath</code> command is very simple. You just
enclose your picture path, either relative to current work path, or absolute
path, in a pair of curly braces. Note that you must place this command before
you begin document otherwise it will take no effect.</p>

<p>Please refer to <a href="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=graphicspath">this page</a> for more details about <code>graphicspath</code> command.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use trap to Do Cleanup Work When Script Terminates]]></title>
    <link href="http://jhshi.me/2012/05/07/use-trap-to-do-cleanup-work-when-script-terninates/"/>
    <updated>2012-05-07T15:08:56-04:00</updated>
    <id>http://jhshi.me/2012/05/07/use-trap-to-do-cleanup-work-when-script-terninates</id>
    <content type="html"><![CDATA[<p>Now I have the script that monitoring the output of several UART devices:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="sb">`</span>seq 0 7<span class="sb">`</span>; <span class="k">do</span>
</span><span class='line'><span class="c"># use grep here to enforce line-buffered output, so concurrent</span>
</span><span class='line'><span class="c"># input from UART isn&#39;t messed up</span>
</span><span class='line'>    cat /dev/crbif0rb0c<span class="k">${</span><span class="nv">i</span><span class="k">}</span>ttyS0 | grep ^ --line-buffered &amp;
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>
</span></code></pre></td></tr></table></div></figure>


<p>But there is one problem, when you terminate the script (<code>ctrl+c</code>), these cat
processes won&#8217;t be killed, so that the next time you run this script, you&#8217;ll not
be able to access these UART device since they are busy.</p>

<p>To solve this problem, we need to do some cleanup work when the script
terminates. In this case, we need to kill these <code>cat</code> processes. We can use the
<code>trap</code> command to do this. Basically, <strong>trap enables you to register a kind of
handler for different kind of signals</strong>.</p>

<p>In this case, we can add a line into the script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">trap</span> <span class="s2">&quot;pkill -P $$&quot;</span> SIGINT
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="sb">`</span>seq 0 7<span class="sb">`</span>; <span class="k">do</span>
</span><span class='line'><span class="c"># use grep here to enforce line-buffered output, so concurrent</span>
</span><span class='line'><span class="c"># input from UART isn&#39;t messed up</span>
</span><span class='line'>    cat /dev/crbif0rb0c<span class="k">${</span><span class="nv">i</span><span class="k">}</span>ttyS0 | grep ^ --line-buffered &amp;
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$$</code> is the process id of the script. <code>pkill -P $$</code> will kill all the child
processes of <code>$$</code>. So that when the script terminates (<code>SIGINT</code> signal from
<code>ctrl+c</code>), this <code>pkill</code> command will be executed and all the cat processes will
be killed.</p>

<p>Thanks to these post.</p>

<ul>
<li><a href="http://steve-parker.org/sh/trap.shtml">http://steve-parker.org/sh/trap.shtml</a></li>
<li><a href="http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2564782">http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2564782</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Line Buffered Cat]]></title>
    <link href="http://jhshi.me/2012/05/04/line-buffered-cat/"/>
    <updated>2012-05-04T10:44:15-04:00</updated>
    <id>http://jhshi.me/2012/05/04/line-buffered-cat</id>
    <content type="html"><![CDATA[<p>I&#8217;d like to watch the output of a UART device in Linux, and I only want to see
the content when there are a whole line. So I prefer some kind of line-buffered
cat such as:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat --line-buffered /dev/crbif0rb0c0ttyS0
</span></code></pre></td></tr></table></div></figure>


<p>But unfortunately, <code>cat</code> doesn&#8217;t have a line-buffered option. And fortunately,
GNU <code>grep</code> has such an option. So we can do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /dev/crbif0rb0c0ttyS0 | grep ^ --line-buffered
</span></code></pre></td></tr></table></div></figure>


<p>Since every line has a ^ (line start), so each line matches the <code>grep</code>. Note
that I ever tried</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /dev/crbif0rb0c0ttyS0 | grep . --line-buffered
</span></code></pre></td></tr></table></div></figure>


<p>But this does not work. Only empty lines are printed, and I don&#8217;t know why&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 SAME_STACK Check Fail in Trap]]></title>
    <link href="http://jhshi.me/2012/05/02/os161-same_stack-check-fail-in-trap/"/>
    <updated>2012-05-02T14:02:11-04:00</updated>
    <id>http://jhshi.me/2012/05/02/os161-same_stack-check-fail-in-trap</id>
    <content type="html"><![CDATA[<p>There are several <code>SAME_STACK</code> asserts in <code>$OS161_SRC/kern/arch/mips/locore/trap.c</code> to
ensure that <strong>current thread did not run out of kernel stack</strong>.</p>

<!-- more -->


<p>A typical assert may looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">KASSERT</span><span class="p">(</span><span class="n">SAME_STACK</span><span class="p">(</span><span class="n">cpustacks</span><span class="p">[</span><span class="n">curcpu</span><span class="o">-&gt;</span><span class="n">c_number</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">tf</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>During the lab, I sometimes fail this assert. At first, I thought I&#8217;ve run
out of kernel stack so I enlarge the <code>STACK_SIZE</code> (<code>$OS161_SRC/kern/include/thread.h</code>)
to 16 KB. But I still fail this assert after that. Then I take a look at the
definition of the <code>SAME_STACK</code> macro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define SAME_STACK(p1, p2) (((p1) &amp; STACK_MASK) == ((p2) &amp; STACK_MASK)) </span>
</span></code></pre></td></tr></table></div></figure>


<p>I found this macro problematic. Suppose <code>STACK_SIZE = 0X00004000</code>, then
<code>STACK_MASK = ~(STACK_SIZE-1) = 0XFFFFC000</code>. Assume <code>p1 (stack top) =
0X80070FFF</code>, <code>p2 (stack pointer) = 0x8006FFFF</code>, then we&#8217;ve only used 0x00001000
bytes stack but <code>SAME_STACK</code> macro will fail, since <code>p1 &amp; STACK_MASK =
0X80070000, p2 &amp; STACK_MASK = 0X8006C000.</code></p>

<p><strong>The point here is the stack top address may not be STACK_SIZE aligned. So we
can not do the same stack check by simply checking their base addresss.</strong></p>

<p>So we need to modify this part to get our kernel work. This is not your fault
but probably a bug shipped with the kernel.</p>

<p>You can use any tricky macros here but a simple pair of comparison will be
suffice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">KASSERT</span><span class="p">(((</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">tf</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="p">((</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">curthread</span><span class="o">-&gt;</span><span class="n">t_stack</span><span class="p">));</span>
</span><span class='line'><span class="n">KASSERT</span><span class="p">(((</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">tf</span><span class="p">)</span> <span class="o">&lt;</span> <span class="p">((</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">curthread</span><span class="o">-&gt;</span><span class="n">t_stack</span><span class="o">+</span><span class="n">STACK_SIZE</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Duplicated TLB entries]]></title>
    <link href="http://jhshi.me/2012/05/02/os161-duplicated-tlb-entries/"/>
    <updated>2012-05-02T13:18:47-04:00</updated>
    <id>http://jhshi.me/2012/05/02/os161-duplicated-tlb-entries</id>
    <content type="html"><![CDATA[<p>Sys161 will panic if you try to write a TLB entry with a <code>entryhi</code>, but
there are already a TLB entry with the same <code>entryhi</code> but in a different TLB
slot. This is because <strong>entryhi should be a UNIQUE key in the TLB bank.</strong></p>

<!-- more -->


<p>When you want to update a TLB entry (e.g., shoot down a TLB entry, or set the
Dirty bit, etc.), you need to first use <code>tlb_probe</code> to query the TLB bank to get
the TLB slot index and then use <code>tlb_read</code> to read the original value, and then
use <code>tlb_write</code> to write the updated TLB entry value to this slot. <strong>But what
if there is a interrupt after you <code>tlb_probe</code> but before <code>tlb_read</code>?</strong> Chance
maybe that the TLB bank is totally refreshed so that you read a stale value
and also write a stale value. Things get totally messed up and errors such as
&#8220;Duplicated TLB entries&#8221; may occur.</p>

<p>To resolve this, <strong>you need to protect your whole &#8221;<code>tlb_probe</code>-><code>tlb_read</code>->
<code>tlb_write</code>&#8221; flow and make sure that this flow won&#8217;t get interrupted.</strong> So you
really want to disable interrupt (<code>int x = splhigh()</code>) before you do <code>tlb_probe</code>
and re-enable it (<code>splx(x)</code>) after <code>tlb_write</code>. Alternatively, you can also use a
spin lock to protect your access to TLB.</p>
]]></content>
  </entry>
  
</feed>
