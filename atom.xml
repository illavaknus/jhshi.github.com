<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pearls in Life]]></title>
  <link href="http://jhshi.me/atom.xml" rel="self"/>
  <link href="http://jhshi.me/"/>
  <updated>2013-04-04T14:03:31-04:00</updated>
  <id>http://jhshi.me/</id>
  <author>
    <name><![CDATA[Jinghao Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vimium Not Working in Google Search Results Page]]></title>
    <link href="http://jhshi.me/2013/03/15/vimium-not-working-in-google-search-results-page/"/>
    <updated>2013-03-15T02:50:16-04:00</updated>
    <id>http://jhshi.me/2013/03/15/vimium-not-working-in-google-search-results-page</id>
    <content type="html"><![CDATA[<p>If you&#8217;re Vim user, then you must try <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en">Vimium</a>. It makes your browsing
much much comfortable!</p>

<!-- more -->


<p>These days, I found that Vimium commands (<code>j</code>, <code>k</code>, <code>f</code>) don&#8217;t work on Google search
results page. But works just in in any other pages. I tried turning the instant
search off, logging out my account in Google&#8217;s homepage, turning of personalized
search results, etc. None of those work.</p>

<p>Then I found that Vimium only stop working if I use Chrome&#8217;s Omnibox to search.
That is, if I do the search in Google&#8217;s home page instead of Chrome&#8217;s Omnibox,
then everything is fine. I suspect that some extra flags in Omnibox&#8217;s default
search pattern is the reason why Vimium refused to work.</p>

<p>But Omnibox is so convenience to use (<code>Alt+D</code> to focus &amp; search). Opening
Google&#8217;s homepage every time you need search will certainly be another pain. So
I changed the default behavior of Chrome&#8217;s Omnibox. Unfortunately, the built-in
Google search pattern is unchangeable, so I added an new search engine entry
and set it as default. Here is the fields of the new entry:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Name: Google (or whatever you want) 
</span><span class='line'>Keyword: Google (or whatever you want) 
</span><span class='line'>Search Pattern: http://www.google.com/search?q=%s </span></code></pre></td></tr></table></div></figure>


<p>Here is a more detailed information about Google&#8217;s search URL. Add whatever you
need, but keep it minimal, in case you screwed up with Vimium again :-)</p>

<p><a href="http://www.blueglass.com/blog/google-search-url-parameters-query-string-anatomy/">http://www.blueglass.com/blog/google-search-url-parameters-query-string-anatomy/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console Input Messed up in OS161]]></title>
    <link href="http://jhshi.me/2013/03/15/console-input-messed-up-in-os161/"/>
    <updated>2013-03-15T00:26:57-04:00</updated>
    <id>http://jhshi.me/2013/03/15/console-input-messed-up-in-os161</id>
    <content type="html"><![CDATA[<p>When you finished the process system call (e.g., <code>fork</code>, <code>execv</code>) and test your
system call by executing some user program, you&#8217;ll probably find that the
console input behavior is messed up.</p>

<!-- more -->


<p>For example, when you executing user shell from OS161 kernel menu, and then
executing <code>/bin/true</code> from the shell, you may see this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>OS/161 kernel <span class="o">[</span>? <span class="k">for </span>menu<span class="o">]</span>: s
</span><span class='line'>Operation took 0.000285120 seconds
</span><span class='line'>OS/161 kernel <span class="o">[</span>? <span class="k">for </span>menu<span class="o">]</span>: <span class="o">(</span>program name unknown<span class="o">)</span>: Timing enabled.
</span><span class='line'>OS/161<span class="nv">$ </span>/bin/true
</span><span class='line'><span class="o">(</span>program name unknown<span class="o">)</span>: bntu: No such file or directory
</span><span class='line'><span class="o">(</span>program name unknown<span class="o">)</span>: subprocess <span class="nb">time</span>: 0.063300440 seconds
</span><span class='line'>Exit 1
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the shell program only receive the input &#8220;bnut&#8221; instead of your
input (<code>/bin/true</code>).</p>

<p>To find out why, we need to dig into how kernel menu (<code>$OS161_SRC/kern/startup/menu.c</code>)
works a little bit. When you hit &#8220;s&#8221; in the kernel menu. What happens?</p>

<ol>
<li><p><code>cmd_dispatch</code> will look up the <code>cmd_table</code> and call <code>cmd_shell</code></p></li>
<li><p><code>cmd_shell</code> just call <code>common_prog</code> with the shell path argument</p></li>
<li><p><code>common_prog</code> will first create a child thread with the start function
<code>cmd_progthread</code>, then return</p></li>
<li><p>In the child thread, <code>cmd_progthread</code> will try to run the actual program
(in our case, the shell)</p></li>
</ol>


<p>Note that the shell program is run in a separate child thread, and the parent
thread (i.e., the menu thread) will continue to run after he &#8220;forked&#8221; the child
thread.</p>

<p>So now there are actually two thread that want to read console input, which
leads to race condition. This is why the shell program receive corrupted input:
the menu thread eaten some of the inputs!</p>

<p>To solve this problem, we need to let the menu thread wait for the child
thread to complete, then return. So what we need to do is in <code>common_prog</code>, we
need to do a <code>waitpid</code> operation after we call <code>thread_fork</code>. And at the end of
<code>cmd_progthread</code>, we need to explicitly call <code>exit</code> with proper exit code in
case the user program doesn&#8217;t do this.</p>

<p>Also note that <code>waitpid</code> and <code>exit</code> are in fact user land system call, and we can
not directly call them in kernel, so you may need to make some &#8220;shortcuts&#8221; in
your system call implementation to let the kernel be able to call <code>sys_waitpid</code>
and <code>sys_exit</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Ant Exec task for Linux Shell Commands]]></title>
    <link href="http://jhshi.me/2013/02/26/use-ant-exec-task-for-linux-shell-commands/"/>
    <updated>2013-02-26T22:59:02-05:00</updated>
    <id>http://jhshi.me/2013/02/26/use-ant-exec-task-for-linux-shell-commands</id>
    <content type="html"><![CDATA[<p>Suppose we use cscope and/or ctags for indexing source code of our Java project
and we want to update the meta data files (e.g. cscope.out, tags) each time
after we compile. We can use the <code>--post-comile</code> target to accomplish this.
Create a <code>custom_rules.xml</code> in your project root directory with the following
content. This file will be included to your main build.xml file.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project&gt;</span>
</span><span class='line'>    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;-post-compile&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exec</span> <span class="na">executable=</span><span class="s">&quot;find&quot;</span> <span class="na">failonerror=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;arg</span> <span class="na">line=</span><span class="s">&quot; . -name *.java&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;redirector</span> <span class="na">output=</span><span class="s">&quot;cscope.files&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exec&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exec</span> <span class="na">executable=</span><span class="s">&quot;cscope&quot;</span> <span class="na">failonerror=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;arg</span> <span class="na">line=</span><span class="s">&quot;-RUbq&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exec&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exec</span> <span class="na">executable=</span><span class="s">&quot;ctags&quot;</span> <span class="na">failonerror=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;arg</span> <span class="na">line=</span><span class="s">&quot;-R .&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exec&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we create one task, namely <code>exec</code> task, to execute our commands. Pay
special attention to our first command, <code>find</code>. More specifically, how we
redirect the output here. The normal bash redirect symbol <code>&gt;</code> doesn&#8217;t not work
here.</p>

<p>Reference:</p>

<ul>
<li><a href="http://ant.apache.org/manual/using.html">http://ant.apache.org/manual/using.html</a></li>
<li><a href="http://ant.apache.org/manual/Tasks/exec.html">http://ant.apache.org/manual/Tasks/exec.html</a></li>
<li><a href="http://ant.apache.org/manual/Types/redirector.html">http://ant.apache.org/manual/Types/redirector.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclim E218 When Open a File in New Tab]]></title>
    <link href="http://jhshi.me/2013/02/26/eclim-e218-when-open-a-file-in-new-tab/"/>
    <updated>2013-02-26T02:24:45-05:00</updated>
    <id>http://jhshi.me/2013/02/26/eclim-e218-when-open-a-file-in-new-tab</id>
    <content type="html"><![CDATA[<p>In the directory sub window, when I use <code>T</code> to open a file in new tab, the
following error message will occur:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>No matching autocommands
</span><span class='line'>Error detected while processing function eclim#project#tree#ProjectTree..eclim#project#tree#ProjectTreeOpen..eclim#display#window#VerticalToolWindowOpen:
</span><span class='line'>line 78:
</span><span class='line'>E218: autocommand nesting too deep
</span><span class='line'>Error detected while processing function 53_OpenFile..eclim#tree#ExecuteAction:
</span><span class='line'>line 12:
</span><span class='line'>E171: Missing :endif
</span><span class='line'>Error detected while processing function 53_OpenFile:
</span><span class='line'>line 8:
</span><span class='line'>E171: Missing :endif</span></code></pre></td></tr></table></div></figure>


<p>To fix this, apply the following patch to <code>$HOME/.vim/eclim/plugin/project.vim</code>
described in <a href="https://github.com/ervandew/eclim/commit/597aeb31fa4ea1e2c102547871935dbb89cf9202">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cscope INSIDE Vim]]></title>
    <link href="http://jhshi.me/2013/02/20/using-cscope-inside-vim/"/>
    <updated>2013-02-20T23:35:58-05:00</updated>
    <id>http://jhshi.me/2013/02/20/using-cscope-inside-vim</id>
    <content type="html"><![CDATA[<p>The goal we want to accomplish here is, jumping to a function definition (maybe
in another file,) finding out where a symbol is defined, finding out what
function(s) call current function and what functions are called from this
function, ALL WITHOUT LEAVING VIM.</p>

<!-- more -->


<p>First, make sure you have <code>cscope</code> installed by issuing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cscope --version
</span></code></pre></td></tr></table></div></figure>


<p>If bash complains &#8220;command not find&#8221;, then install <code>cscope</code>. In Ubuntu, the
command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install cscope
</span></code></pre></td></tr></table></div></figure>


<p>Then, we need to generate <code>cscope</code> database. If you&#8217;re dealing with C files,
then in the root directory of the source tree, using this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cscope -RUbq
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re dealing with Java files, before generating the database, we need to
tell <code>cscope</code> tracing which files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find . -name *.java &gt; cscope.files
</span><span class='line'><span class="nv">$ </span>cscope -RUbq
</span></code></pre></td></tr></table></div></figure>


<p>The explanations are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-R: Recurse subdirectories during search <span class="k">for </span><span class="nb">source </span>files.
</span><span class='line'>-U: Check file <span class="nb">time </span>stamps. This option will update the <span class="nb">time </span>stamp on the database even <span class="k">if </span>no files have changed.
</span><span class='line'>-b: Build the cross-reference only. We don<span class="err">&#39;</span>t want the interactive mode.
</span><span class='line'>-q: Enable fast symbol lookup via an inverted index
</span></code></pre></td></tr></table></div></figure>


<p>For more details, consult the <code>cscope</code> manual:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>man cscope
</span></code></pre></td></tr></table></div></figure>


<p>After this step, several <code>cscope</code> database files will be generated. If you&#8217;re
using git or hg to manage your code, you may want to ignore them in the git/hg
repository. Do that by adding these lines into your .gitignore/.hgignore</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cscope.*
</span></code></pre></td></tr></table></div></figure>


<p>Then we need to tell Vim how to interact with <code>cscope</code>. Add the following lines
into your <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>has<span class="o">(</span><span class="s2">&quot;cscope&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nb">set </span><span class="nv">csprg</span><span class="o">=</span>/usr/bin/cscope
</span><span class='line'>    <span class="nb">set </span><span class="nv">csto</span><span class="o">=</span>0
</span><span class='line'>    <span class="nb">set </span>cst
</span><span class='line'>    <span class="nb">set </span>csverb
</span><span class='line'>    <span class="s2">&quot; C symbol</span>
</span><span class='line'><span class="s2">    nmap &lt;C-\&gt;s :cs find s &lt;C-R&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;CR&gt;&lt;CR&gt;</span>
</span><span class='line'><span class="s2">    &quot;</span> definition
</span><span class='line'>    nmap &lt;C-<span class="se">\&gt;</span>g :cs find g &lt;C-R&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;CR&gt;&lt;CR&gt;
</span><span class='line'>    <span class="s2">&quot; functions that called by this function</span>
</span><span class='line'><span class="s2">    nmap &lt;C-\&gt;d :cs find d &lt;C-R&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;CR&gt;&lt;CR&gt;</span>
</span><span class='line'><span class="s2">    &quot;</span> funtions that calling this <span class="k">function</span>
</span><span class='line'><span class="k">    </span>nmap &lt;C-<span class="se">\&gt;</span>c :cs find c &lt;C-R&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;CR&gt;&lt;CR&gt;
</span><span class='line'>    <span class="s2">&quot; test string</span>
</span><span class='line'><span class="s2">    nmap &lt;C-\&gt;t :cs find t &lt;C-R&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;CR&gt;&lt;CR&gt;</span>
</span><span class='line'><span class="s2">    &quot;</span> egrep pattern
</span><span class='line'>    nmap &lt;C-<span class="se">\&gt;</span>e :cs find e &lt;C-R&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;CR&gt;&lt;CR&gt;
</span><span class='line'>    <span class="s2">&quot; file</span>
</span><span class='line'><span class="s2">    nmap &lt;C-\&gt;f :cs find f &lt;C-R&gt;=expand(&quot;</span>&lt;cfile&gt;<span class="s2">&quot;)&lt;CR&gt;&lt;CR&gt;</span>
</span><span class='line'><span class="s2">    &quot;</span> files <span class="c">#including this file</span>
</span><span class='line'>    nmap &lt;C-<span class="se">\&gt;</span>i :cs find i ^&lt;C-R&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cfile&gt;&quot;</span><span class="o">)</span>&lt;CR&gt;<span class="nv">$&lt;</span>CR&gt;
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot; Automatically make cscope connections</span>
</span><span class='line'><span class="s2">    function! LoadCscope()</span>
</span><span class='line'><span class="s2">        let db = findfile(&quot;</span>cscope.out<span class="s2">&quot;, &quot;</span>.;<span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">        if (!empty(db))</span>
</span><span class='line'><span class="s2">            let path = strpart(db, 0, match(db, &quot;</span>/cscope.out<span class="s2">$&quot;))</span>
</span><span class='line'><span class="s2">            set nocscopeverbose &quot;</span> suppress <span class="s1">&#39;duplicate connection&#39;</span> error
</span><span class='line'>            exe <span class="s2">&quot;cs add &quot;</span> . db . <span class="s2">&quot; &quot;</span> . path
</span><span class='line'>            <span class="nb">set </span>cscopeverbose
</span><span class='line'>        endif
</span><span class='line'>    endfunction
</span><span class='line'>    au BufEnter /* call LoadCscope<span class="o">()</span>
</span><span class='line'>
</span><span class='line'>endif
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re done! Now using Vim to edit a source code file. Put the cursor on a
symbol (variable, function, etc.), First press <code>Ctrl+\</code>, then press:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>s: find all appearance of this symbol
</span><span class='line'>g: go to the definition of this symbol
</span><span class='line'>d: functions that called by this <span class="k">function</span>
</span><span class='line'>c: functions that calling this <span class="k">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more details about <code>cscope</code>, inside Vim, press <code>:h cs</code> to see the help
message of <code>cscope</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFS 6.9.1: command substitution: line 3: syntax error near unexpected token  `)']]></title>
    <link href="http://jhshi.me/2012/09/18/lfs-6-9-1-command-substitution-line-3-syntax-error-near-unexpected-token/"/>
    <updated>2012-09-18T14:57:23-04:00</updated>
    <id>http://jhshi.me/2012/09/18/lfs-6-9-1-command-substitution-line-3-syntax-error-near-unexpected-token</id>
    <content type="html"><![CDATA[<p>I encountered this error when compiling glibc. The apparent cause is that
bash can not deal with brackets correctly. So even a simple command like echo
<code>$(ls)</code> will fail with the same error (command substitution).</p>

<!-- more -->


<p>The most suspicious cause is that when compile bash in section 5.15.1, I use
<code>byacc</code> for walk around when the compiler complained the absence of <code>yacc</code>. <strong>Bash
uses yacc grammer rules and only GNU bison will generate the correct parsing
code for the bash build</strong>. So I un-installed byacc and installed bison. Then</p>

<ul>
<li><p>Make a soft link at <code>/usr/bin/yacc</code> to bison</p></li>
<li><p>Recompile all the package after 5.10 (tcl) and before 5.15 (include 5.15)</p></li>
<li><p>Test if problem solved using echo <code>$(ls)</code> command</p></li>
<li><p>If yes, then using <code>/tools/bin/bash --login +h</code> to lunch the new bash</p></li>
</ul>


<p>Also see:</p>

<ul>
<li><a href="http://www.mail-archive.com/lfs-support@linuxfromscratch.org/msg16549.html">http://www.mail-archive.com/lfs-support@linuxfromscratch.org/msg16549.html</a></li>
<li><a href="http://unix.stackexchange.com/questions/28369/linux-from-scratchs-bash-problem-syntax-error">http://unix.stackexchange.com/questions/28369/linux-from-scratchs-bash-problem-syntax-error</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFS 5.5.1: Change GCC's Stack Protection Option]]></title>
    <link href="http://jhshi.me/2012/09/08/change-gccs-stack-protection-option-in-lfs/"/>
    <updated>2012-09-08T11:39:27-04:00</updated>
    <id>http://jhshi.me/2012/09/08/change-gccs-stack-protection-option-in-lfs</id>
    <content type="html"><![CDATA[<p>In <a href="http://www.linuxfromscratch.org/lfs/view/stable/chapter05/gcc-pass1.html">Chapter 5.5</a>, there is one step that fixes the GCC&#8217;s stack protection
detection problem. The command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i <span class="s1">&#39;/k prot/agcc_cv_libc_provides_ssp=yes&#39;</span> gcc/configure
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>This command seems weird to me at first glance. After digging a little more
about <code>sed</code> command, it&#8217;s intention is much clear.</p>

<ul>
<li><p><strong>-i</strong> means change the file (i.e., <code>gcc/configure</code>) in place</p></li>
<li><p><strong>/k prot/</strong> is the pattern. If you look at <code>gcc/configure</code>, you&#8217;ll find a
line (around 26695) of comment that says:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Test for stack protector support in target C library</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you&#8217;ll see that this is the only occurrence of &#8220;stack protector&#8221; (as well
as <code>k prot</code>. I think we&#8217;d better use <code>/stack protector/</code> as the pattern for
easy understanding.</p>

<ul>
<li><p><strong>a</strong> means append a line after the line that contains the pattern. (<a href="http://www.grymoire.com/Unix/Sed.html#uh-40">sed document</a>)</p></li>
<li><p><strong>gcc_cv_libc_provides_ssp=yes</strong> is the actual line being appended.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use rsync and cron to do regular backup (Part II)]]></title>
    <link href="http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-ii/"/>
    <updated>2012-07-11T12:53:52-04:00</updated>
    <id>http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-ii</id>
    <content type="html"><![CDATA[<p>Now that we can <a href="http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i">take advantage of rsync to minimize the data to transfer when
backup</a>. But it&#8217;s still a little uncomfortable if we need to do this manually
everyday, right? Well, cron is here to solve the pain.</p>

<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Cron">Cron</a> is kind of a system service that
automatically do some job as you specified. Backup, for example, is a perfect
kind of job that we can count on cron.</p>

<p>First, we need to specify a job that we want cron to do. In my case, I want
cron to automatically sync my source tree folder on remote data center and my
local backup folder. A simple rsync command seems meet my need. But actually,
there are more to consider:</p>

<ul>
<li><p>I don&#8217;t want to copy the obj files, since they are normally large in size
and change frequently, but can be easily re-generated. But I also don&#8217;t want to
skip the entire build folder when do rsync since there are some configure files
in there.</p></li>
<li><p>The backup process should be totally automated. More specifically, no
password is needed when do rysnc.</p></li>
</ul>


<p>Towards the first need, I can use ssh to send remote command to
do necessary clean up work before rysnc. And the second need can
be meted according to my previous post about <a href="http://jhshi.me/2012/04/27/sshscp-without-password">ssh/scp without password</a>.</p>

<p>So my final backup script looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh </span>
</span><span class='line'><span class="c"># ~/backup.sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">LOG_FILE</span><span class="o">=</span>~/backup.log
</span><span class='line'><span class="nv">SOURCE_DIR</span><span class="o">=</span>b@B:~/src/
</span><span class='line'><span class="nv">TARGET_DIR</span><span class="o">=</span>~/src_backup
</span><span class='line'>
</span><span class='line'>date &gt;&gt; <span class="nv">$LOG_FILE</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Synchronization start...&quot;</span> &gt;&gt; <span class="nv">$LOG_FILE</span>
</span><span class='line'>ssh b@B <span class="err">&#39;</span><span class="nb">cd</span> ~/src/build; make clean; rm -rf obj/<span class="s2">&quot; &gt;&gt; $LOG_FILE </span>
</span><span class='line'><span class="s2">rsync -avz --exclude &quot;</span>tags<span class="s2">&quot; $SOURCE_DIR $TARGET_DIR &gt;&gt; $LOG_FILE </span>
</span><span class='line'><span class="s2">echo &quot;</span>Synchronization <span class="k">done</span><span class="err">&quot;</span> &gt;&gt; <span class="nv">$LOG_FILE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we figure out what to do, we need to tell cron about our job. The
configure file of cron is <code>/etc/crontab</code>. A job description is like follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Example of job definition: </span>
</span><span class='line'><span class="c"># .----------------minute (0 - 59) </span>
</span><span class='line'><span class="c"># | .------------- hour (0 - 23) </span>
</span><span class='line'><span class="c"># | | .---------- day of month (1 - 31) </span>
</span><span class='line'><span class="c"># | | | .------- month (1 - 12) OR jan,feb,mar,apr ... </span>
</span><span class='line'><span class="c"># | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat </span>
</span><span class='line'><span class="c"># | | | | | </span>
</span><span class='line'><span class="c"># * * * * * user-name command to be executed 0 0 * * * jack ~/backup.sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want to do backup every day on midnight so I set the minute and hour both to
0. The asterisk (<code>*</code>) symbol in day/month means any valid values.</p>

<p>Now we are done. The back up process is completely automated and scheduled.</p>

<p><strong>Reference</strong>:</p>

<p><a href="http://myhowtosandprojects.blogspot.hk/2008/07/sincronize-folders-with-rsync-using-ssh.html">http://myhowtosandprojects.blogspot.hk/2008/07/sincronize-folders-with-rsync-using-ssh.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use rsync and cron to do regular backup (Part I)]]></title>
    <link href="http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i/"/>
    <updated>2012-07-11T12:23:45-04:00</updated>
    <id>http://jhshi.me/2012/07/11/use-rsync-and-cron-to-do-regular-backup-part-i</id>
    <content type="html"><![CDATA[<p>Recently I do most of my work on a remote data center through a slow network
connection (&lt;100KB/sec). I usually backup my project source tree as follows.
I first do make clean and also delete any unnecessary obj files to shrink the
total file size, then I compress the whole source tree as a tar ball and then I
use <code>scp</code> locally to fetch the backup tar ball to my local machine. The procedure
is quite boring since I need to do this every day before I go home, otherwise
the whole bandwidth will be occupied for near an hour during which I can almost
do nothing.</p>

<p>Situation gets better when I find <code>rsync</code> and <code>cron</code>. Here is how I do automatic
regular (daily) backup with them.</p>

<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Rsync">Rsync</a> is a file synchronization tool
that aims to minimize the data transfer during copy files. This is done via
only send the diffs to destination. It is perfect when you need to do regular
copy between two fixed locations. Rsync has many options (well, as most of
other GNU tools), here is two of them that are used more frequently:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ensure that symbolic links, devices, attributes, permissions, </span>
</span><span class='line'><span class="c"># ownerships, etc are preserved in the transfer </span>
</span><span class='line'>-a, --archive
</span><span class='line'>
</span><span class='line'><span class="c">#compress data during transfer, especially useful when the bandwidth is limited</span>
</span><span class='line'>-z, --compress
</span><span class='line'>
</span><span class='line'><span class="c"># exclude the directories or files that you don&#39;t want to sync, such as obj</span>
</span><span class='line'><span class="c"># files, tag files, etc </span>
</span><span class='line'>--exclude
</span></code></pre></td></tr></table></div></figure>


<p>Suppose that you have a source tree on host B: <code>~/src</code>, and you want to sync this
source tree with a local folder named: <code>~/src_backup</code>, then the follow command
will suffice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rsync -avz --exclude <span class="s2">&quot;obj/&quot;</span> --exclude <span class="s2">&quot;tags&quot;</span> --exclude <span class="s2">&quot;build&quot;</span> b@B:~/src/ ~/src_backup
</span></code></pre></td></tr></table></div></figure>


<p>The two exclude option will tell rsync to skip the obj subdirectory as well
as the tags file. The trailing slash in the source (<code>b@B:~/src/</code>) will tell
rsync not to create an additional directory level at the destination. Without
this slash, rsync will create a <code>src</code> directory under <code>~/src_backup</code>, which is not
desirable.</p>

<p>Now that after the first time rsync, the following rsync commands will only
transfer the file changes to local, which is a great save of the bandwidth.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox: Unable to monitor filesystem]]></title>
    <link href="http://jhshi.me/2012/07/11/dropbox-unable-to-monitor-filesystem/"/>
    <updated>2012-07-11T11:39:14-04:00</updated>
    <id>http://jhshi.me/2012/07/11/dropbox-unable-to-monitor-filesystem</id>
    <content type="html"><![CDATA[<p>Sometime this error occurs that says:</p>

<blockquote><p>&#8220;Unable to monitor file system. Please run: echo 100000 | sudo tee
/proc/sys/fs/inotify/max_user_watches and restart Dropbox to correct the
problem.</p></blockquote>

<!-- more -->


<p>We need to adjust the system setting on the maximum file number that Dropbox
can watch.</p>

<p>The following command will solve your pain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>fs.inotify.max_user_watches<span class="o">=</span>100000 | sudo tee -a /etc/sysctl.conf; sudo sysctl -p
</span></code></pre></td></tr></table></div></figure>


<p>Here is the tip from Dropbox website.</p>

<p><a href="https://www.dropbox.com/help/145/en](https://www.dropbox.com/help/145/en">https://www.dropbox.com/help/145/en](https://www.dropbox.com/help/145/en</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh error: Agent admitted failure to sign using the key]]></title>
    <link href="http://jhshi.me/2012/07/11/ssh-error-agent-admitted-failure-to-sign-using-the-key/"/>
    <updated>2012-07-11T10:37:38-04:00</updated>
    <id>http://jhshi.me/2012/07/11/ssh-error-agent-admitted-failure-to-sign-using-the-key</id>
    <content type="html"><![CDATA[<p>If you follow <a href="http://jhshi.me/2012/04/27/sshscp-without-password/">my previous post about ssh/scp without password</a>, but you
got this error when you try to ssh to B on A, then you need to add RSA or DSA
identities to the authentication agent. A ssh-add command on host A will solve
your pain.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-add
</span><span class='line'><span class="c"># Sample output</span>
</span><span class='line'>Identity added: /home/jack/.ssh/id_rsa <span class="o">(</span>/home/jack/.ssh/id_rsa<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Reference</strong></p>

<p><a href="http://www.cyberciti.biz/faq/unix-appleosx-linux-bsd-agent-admitted-failuretosignusingkey/">http://www.cyberciti.biz/faq/unix-appleosx-linux-bsd-agent-admitted-failuretosignusingkey/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specify graphics path in Latex]]></title>
    <link href="http://jhshi.me/2012/06/22/specify-graphicspath-in-latex/"/>
    <updated>2012-06-22T09:34:33-04:00</updated>
    <id>http://jhshi.me/2012/06/22/specify-graphicspath-in-latex</id>
    <content type="html"><![CDATA[<p>We can use the <code>graphicx</code> package together with the <code>graphicspath</code> command to
specify the looking up path for pictures. A typical structure may look like
this:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\usepackage</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span><span class='line'><span class="c">% Must use this command BEFORE you begin document!</span>
</span><span class='line'><span class="k">\graphicspath</span><span class="nb">{{</span>pic<span class="nb">_</span>path1/<span class="nb">}{</span>pic<span class="nb">_</span>path2<span class="nb">}}</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'><span class="c">% some content</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the syntax of <code>graphicspath</code> command is very simple. You just
enclose your picture path, either relative to current work path, or absolute
path, in a pair of curly braces. Note that you must place this command before
you begin document otherwise it will take no effect.</p>

<p>Please refer to <a href="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=graphicspath">this page</a> for more details about <code>graphicspath</code> command.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use trap to Do Cleanup Work When Script Terminates]]></title>
    <link href="http://jhshi.me/2012/05/07/use-trap-to-do-cleanup-work-when-script-terninates/"/>
    <updated>2012-05-07T15:08:56-04:00</updated>
    <id>http://jhshi.me/2012/05/07/use-trap-to-do-cleanup-work-when-script-terninates</id>
    <content type="html"><![CDATA[<p>Now I have the script that monitoring the output of several UART devices:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="sb">`</span>seq 0 7<span class="sb">`</span>; <span class="k">do</span>
</span><span class='line'><span class="c"># use grep here to enforce line-buffered output, so concurrent</span>
</span><span class='line'><span class="c"># input from UART isn&#39;t messed up</span>
</span><span class='line'>    cat /dev/crbif0rb0c<span class="k">${</span><span class="nv">i</span><span class="k">}</span>ttyS0 | grep ^ --line-buffered &amp;
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>
</span></code></pre></td></tr></table></div></figure>


<p>But there is one problem, when you terminate the script (<code>ctrl+c</code>), these cat
processes won&#8217;t be killed, so that the next time you run this script, you&#8217;ll not
be able to access these UART device since they are busy.</p>

<p>To solve this problem, we need to do some cleanup work when the script
terminates. In this case, we need to kill these <code>cat</code> processes. We can use the
<code>trap</code> command to do this. Basically, <strong>trap enables you to register a kind of
handler for different kind of signals</strong>.</p>

<p>In this case, we can add a line into the script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">trap</span> <span class="s2">&quot;pkill -P $$&quot;</span> SIGINT
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="sb">`</span>seq 0 7<span class="sb">`</span>; <span class="k">do</span>
</span><span class='line'><span class="c"># use grep here to enforce line-buffered output, so concurrent</span>
</span><span class='line'><span class="c"># input from UART isn&#39;t messed up</span>
</span><span class='line'>    cat /dev/crbif0rb0c<span class="k">${</span><span class="nv">i</span><span class="k">}</span>ttyS0 | grep ^ --line-buffered &amp;
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$$</code> is the process id of the script. <code>pkill -P $$</code> will kill all the child
processes of <code>$$</code>. So that when the script terminates (<code>SIGINT</code> signal from
<code>ctrl+c</code>), this <code>pkill</code> command will be executed and all the cat processes will
be killed.</p>

<p>Thanks to these post.</p>

<ul>
<li><a href="http://steve-parker.org/sh/trap.shtml">http://steve-parker.org/sh/trap.shtml</a></li>
<li><a href="http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2564782">http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2564782</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Line Buffered Cat]]></title>
    <link href="http://jhshi.me/2012/05/04/line-buffered-cat/"/>
    <updated>2012-05-04T10:44:15-04:00</updated>
    <id>http://jhshi.me/2012/05/04/line-buffered-cat</id>
    <content type="html"><![CDATA[<p>I&#8217;d like to watch the output of a UART device in Linux, and I only want to see
the content when there are a whole line. So I prefer some kind of line-buffered
cat such as:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat --line-buffered /dev/crbif0rb0c0ttyS0
</span></code></pre></td></tr></table></div></figure>


<p>But unfortunately, <code>cat</code> doesn&#8217;t have a line-buffered option. And fortunately,
GNU <code>grep</code> has such an option. So we can do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /dev/crbif0rb0c0ttyS0 | grep ^ --line-buffered
</span></code></pre></td></tr></table></div></figure>


<p>Since every line has a ^ (line start), so each line matches the <code>grep</code>. Note
that I ever tried</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /dev/crbif0rb0c0ttyS0 | grep . --line-buffered
</span></code></pre></td></tr></table></div></figure>


<p>But this does not work. Only empty lines are printed, and I don&#8217;t know why&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 SAME_STACK Check Fail in Trap]]></title>
    <link href="http://jhshi.me/2012/05/02/os161-same_stack-check-fail-in-trap/"/>
    <updated>2012-05-02T14:02:11-04:00</updated>
    <id>http://jhshi.me/2012/05/02/os161-same_stack-check-fail-in-trap</id>
    <content type="html"><![CDATA[<p>There are several <code>SAME_STACK</code> asserts in <code>$OS161_SRC/kern/arch/mips/locore/trap.c</code> to
ensure that <strong>current thread did not run out of kernel stack</strong>.</p>

<!-- more -->


<p>A typical assert may looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">KASSERT</span><span class="p">(</span><span class="n">SAME_STACK</span><span class="p">(</span><span class="n">cpustacks</span><span class="p">[</span><span class="n">curcpu</span><span class="o">-&gt;</span><span class="n">c_number</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">tf</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>During the lab, I sometimes fail this assert. At first, I thought I&#8217;ve run
out of kernel stack so I enlarge the <code>STACK_SIZE</code> (<code>$OS161_SRC/kern/include/thread.h</code>)
to 16 KB. But I still fail this assert after that. Then I take a look at the
definition of the <code>SAME_STACK</code> macro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define SAME_STACK(p1, p2) (((p1) &amp; STACK_MASK) == ((p2) &amp; STACK_MASK)) </span>
</span></code></pre></td></tr></table></div></figure>


<p>I found this macro problematic. Suppose <code>STACK_SIZE = 0X00004000</code>, then
<code>STACK_MASK = ~(STACK_SIZE-1) = 0XFFFFC000</code>. Assume <code>p1 (stack top) =
0X80070FFF</code>, <code>p2 (stack pointer) = 0x8006FFFF</code>, then we&#8217;ve only used 0x00001000
bytes stack but <code>SAME_STACK</code> macro will fail, since <code>p1 &amp; STACK_MASK =
0X80070000, p2 &amp; STACK_MASK = 0X8006C000.</code></p>

<p><strong>The point here is the stack top address may not be STACK_SIZE aligned. So we
can not do the same stack check by simply checking their base addresss.</strong></p>

<p>So we need to modify this part to get our kernel work. This is not your fault
but probably a bug shipped with the kernel.</p>

<p>You can use any tricky macros here but a simple pair of comparison will be
suffice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">KASSERT</span><span class="p">(((</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">tf</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="p">((</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">curthread</span><span class="o">-&gt;</span><span class="n">t_stack</span><span class="p">));</span>
</span><span class='line'><span class="n">KASSERT</span><span class="p">(((</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">tf</span><span class="p">)</span> <span class="o">&lt;</span> <span class="p">((</span><span class="n">vaddr_t</span><span class="p">)</span><span class="n">curthread</span><span class="o">-&gt;</span><span class="n">t_stack</span><span class="o">+</span><span class="n">STACK_SIZE</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Duplicated TLB entries]]></title>
    <link href="http://jhshi.me/2012/05/02/os161-duplicated-tlb-entries/"/>
    <updated>2012-05-02T13:18:47-04:00</updated>
    <id>http://jhshi.me/2012/05/02/os161-duplicated-tlb-entries</id>
    <content type="html"><![CDATA[<p>Sys161 will panic if you try to write a TLB entry with a <code>entryhi</code>, but
there are already a TLB entry with the same <code>entryhi</code> but in a different TLB
slot. This is because <strong>entryhi should be a UNIQUE key in the TLB bank.</strong></p>

<!-- more -->


<p>When you want to update a TLB entry (e.g., shoot down a TLB entry, or set the
Dirty bit, etc.), you need to first use <code>tlb_probe</code> to query the TLB bank to get
the TLB slot index and then use <code>tlb_read</code> to read the original value, and then
use <code>tlb_write</code> to write the updated TLB entry value to this slot. <strong>But what
if there is a interrupt after you <code>tlb_probe</code> but before <code>tlb_read</code>?</strong> Chance
maybe that the TLB bank is totally refreshed so that you read a stale value
and also write a stale value. Things get totally messed up and errors such as
&#8220;Duplicated TLB entries&#8221; may occur.</p>

<p>To resolve this, <strong>you need to protect your whole &#8221;<code>tlb_probe</code>-><code>tlb_read</code>->
<code>tlb_write</code>&#8221; flow and make sure that this flow won&#8217;t get interrupted.</strong> So you
really want to disable interrupt (<code>int x = splhigh()</code>) before you do <code>tlb_probe</code>
and re-enable it (<code>splx(x)</code>) after <code>tlb_write</code>. Alternatively, you can also use a
spin lock to protect your access to TLB.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Swapping]]></title>
    <link href="http://jhshi.me/2012/04/28/os161-swapping/"/>
    <updated>2012-04-28T13:27:39-04:00</updated>
    <id>http://jhshi.me/2012/04/28/os161-swapping</id>
    <content type="html"><![CDATA[<p>Now that you can <a href="http://jhshi.me/2012/04/24/os161-physical-page-management">allocate/free physical pages</a>, and you have <a href="http://jhshi.me/2012/04/27/os161-tlb-miss-and-page-fault">demand paging
through handling TLB miss</a>. Let&#8217;s get the final part work: swapping.</p>

<!-- more -->


<h3>Three basic operations for a physical page</h3>

<p>The first is called <strong>evict</strong>. In a nutshell, <code>evict</code> a physical page means we
modify the page table entry so that this page is not Present (<code>PTE_P</code>), but
Swapped (<code>PTE_S</code>). And we also need to shoot down the relative TLB entry. But in
<code>evict</code>, we will not write the page&#8217;s content to disk. Apparently, <strong>evict can
only operate on clean pages</strong>.</p>

<p>The second operation is <strong>swapout</strong>. We first write this page&#8217;s content to
disk, which makes the page from dirty to clean. And the we just evict it.
<strong>swapout operation is for dirty pages</strong>.</p>

<p>The last operations is <strong>swapin</strong>. Basically, it&#8217;s for read some virtual page
from swap file and place it in some physical page, and also need to modify
the relevant page table entry, making this page Present (<code>PTE_P</code>) instead of
Swapped(<code>PTE_S</code>).</p>

<h3>How to store the swapped pages</h3>

<p>We have two options here: store the pages in a <strong>disk</strong>, or in a <strong>file</strong>.</p>

<p>By default, sys161 provide two disks through lamebus, i.e., <code>lhd0</code> and <code>lhd1</code>. If
you want to store the pages in the raw disk, you should open the swap space like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">vnode</span><span class="o">*</span> <span class="n">swapfile</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">err</span> <span class="o">=</span> <span class="n">vfs_open</span><span class="p">(</span><span class="s">&quot;lhd0raw:&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">swapfile</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the file name must be <code>lhd0raw:</code> or <code>lhd1raw</code> and the open flag must
be <code>O_RDWR</code>, since the disk is there, and needn&#8217;t to be created or trunked.</p>

<p>On the other hand, if you decided to just store the pages in a normal file, then
you probably want to create the file like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">vnode</span><span class="o">*</span> <span class="n">swapfile</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">err</span> <span class="o">=</span> <span class="n">vfs_open</span><span class="p">(</span><span class="s">&quot;swapfile&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="o">|</span><span class="n">O_CREAT</span><span class="o">|</span><span class="n">O_TRUNC</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">swapfile</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The file name is arbitrary, just choose one you like. And we provide the
<code>O_TRUNC</code> flag so that we got a &#8220;clean&#8221; swap file that contains no contents.
Then the file will be created under the root directory.</p>

<p>From my experience, store pages in normal file could be two times faster in
terms of read/write bandwidth.</p>

<p>For the same reason why we can not open consoles in <code>thread_create</code>, you can not
do this in <code>vm_bootstrap</code> since at that point, VFS system
was not initialized yet (see <code>$OS161_SRC/kern/startup/main.c</code> for boot sequence,
especially line 125~130). But it&#8217;s OK, we can <strong>open the file until we really
need to write pages</strong>, e.g., when we swap out the first page.</p>

<p>We&#8217;ll leverage the file operation to manipulate swapped pages. You may want to
review the file operation system calls to get familiar with VFS operations. We
use a lot <code>uio_kinit</code> and <code>VOP_READ</code>/<code>VOP_WRITE</code> here. But before all these, we need
to first create a swap file.</p>

<p>We also need some data structure to record each page&#8217;s location in the swap
file. This data structure should be something like a map. The key is (address
space, va) pair, and the value is the location of the page. As usual, for
simplicity, we can just use a statically allocated array. <strong>Each array element
contains the (address space, va) pair, and this element&#8217;s index is the page&#8217;s
location</strong>. Of course, we need to set up a limit of maximum swapped page number
if we adopt this silly manner. When swap out a page, we first look up this
array (by comparing <code>as</code> and <code>va</code>) and find out if the swap file has already
contain a copy of this page, if yes then we directly overwrite that page and if
no, we just find a available slot and write the page to that slot.</p>

<p>A important note is that you want to <strong>create ONE swap file for all process</strong>,
instead of one swap file for each process. Since by doing the later, you also
have to allocate a mapping structure for each process and you&#8217;ll run out of
memory very quickly (kernel pages are fixed, right?). Now the swap file and the
mapping data structure is a shared resource among all processes. So you need to
protect them with a lock.</p>

<h3>Two I/O operations on the swap file</h3>

<p>These two operations is quite straightforward. The first is called <code>write_page</code>,
which is responsible to <strong>write a page content to a specified location of the
swap file</strong>. The second is <code>read_page</code>, which is to <strong>read a specified page in
the swap file and copy the content to a physical page</strong>. We do not necessarily
have to have these to util functions but it&#8217;s always good to abstract low level
operations and encapsulate to a convenient interface.</p>

<h3>The Swapping Work flow</h3>

<p>In your paging algorithm, you certainly will first look for free physical
pages. But once you fail to find such a page, you have to swap some page out
to get a free page. That&#8217;s what the magic function <code>MAKE_PAGE_AVAIL</code> do in
<a href="http://jhshi.me/2012/04/24/os161-physical-page-management">my previous post about physical page allocation</a>.</p>

<p>Now let&#8217;s take a look at the magic function. Denote the page that was to
swapped out as victim. If it&#8217;s state is <code>PAGE_STATE_CLEAN</code>, it means that this
page already have a copy in disk and was not ever modified since swapped in. So
we can safely discard it&#8217;s content. We use the <code>evict</code> operation to deal with it.
And after that, this page is available.</p>

<p>If this page is dirty, which means either this page do not have a copy in swap
file or this page was modified since it&#8217;s swapped in, in both case, we need to
write its content to swap file. We can use the <code>swapout</code> operation here.</p>

<p>In <code>vm_fault</code> with fault type <code>VM_FAULT_READ</code> or <code>VM_FAULT_WRITE</code>, when we find that
this page is not Present (<code>PTE_P</code>), instead of allocate a new page for it, we
need to further check if this page was swapped (<code>PTE_S</code>), if yes then we need to
swap it in, if no then we can allocate a new physical page for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 TLB Miss and Page Fault]]></title>
    <link href="http://jhshi.me/2012/04/27/os161-tlb-miss-and-page-fault/"/>
    <updated>2012-04-27T19:27:26-04:00</updated>
    <id>http://jhshi.me/2012/04/27/os161-tlb-miss-and-page-fault</id>
    <content type="html"><![CDATA[<p>Now we&#8217;ve set up user address space, it&#8217;s time to handle TLB/page faults. Note
that there is a difference between TLB and page faults:</p>

<ul>
<li><p>TLB fault means the hardware don&#8217;t know how to translate a virtual address
since the translation didn&#8217;t present in any TLB entry. So the hardware raise a
TLB fault to let the kernel decide how to translate that address.</p></li>
<li><p>Page fault means the user program tries to access a page that is not in
memory, either not yet allocated or swapped out.</p></li>
</ul>


<!-- more -->


<h3>TLB Entry Format</h3>

<p>In sys161, which simulates MIPS R3000, there are totally 64 TLB entries. Each
entry is a 64-bit value that has the following format:</p>

<p><img class="center" src="http://jhshi.me/images/2012-04-27-mipsr3000-tlb.png"></p>

<p>Section 18.6 of <a href="http://pages.cs.wisc.edu/~remzi/OSFEP/vm-tlbs.pdf">this document</a> contains a detailed description of the
meaning of each bits. But briefly, VPN (abbr. for Virtual Page Frame Number)
is the high 20 bits of a virtual address and PPN is the high 20 bits of a
physical address space. <strong>When Dirty bit is 1, it means this page is writable,
otherwise, it&#8217;s read-only.</strong> When Valid bit is 1, it means this TLB entry
contains a valid translation.</p>

<p>In OS161, we can just ignore the ASID part and Global bit, unless you really
want to do some tricks such as multiplex TLB among processes instead of just
shoot down all TLB entries when context switch. Also, we can ignore the NoCache
bit.</p>

<h3>TLB Miss Type</h3>

<p>When translation a virtual address, the hardware will issue a parallel search
in all the TLB entries, using the VPN as a search key. If the hardware failed to
find a entry or find a entry but with Valid bit is 0, a TLB Miss will be
issued. The miss type could be <code>VM_FAULT_READ</code> or <code>VM_FAULT_WRITE</code>, depending on
whether it&#8217;s a read or write operation. On the other hand, if it&#8217;s a write
operation and hardware find a valid TLB entry of VPN, but the Dirty bit is 0,
then this is also a TLB miss with type <code>VM_FAULT_READONLY</code>.</p>

<p>If none of above cases happen, then this is a TLB hit, everybody is happy :-)</p>

<h3>TLB Manipulate Utils</h3>

<p>Before we discuss how to handle a TLB fault. We first take a look at how
to manipulate the TLB entries. The functions that access TLB can be found
at <code>$OS161_SRC/kern/arch/mips/include/tlb.h</code>. Four routines are provided. And the
comments there are quite clear. We use <code>tlb_probe</code> to query the TLB bank, and use
<code>tlb_read</code>/<code>tlb_write</code> to read/write a specific TLB entry, and use <code>tlb_random</code> to
let the hardware decide which entry to write to.</p>

<h3>Finally, handle TLB Miss</h3>

<p>On a TLB fault, the first thing to do is to check whether the faulting address
is a valid user space address. Since it&#8217;s possible that the fault is caused by
<code>copyin</code>/<code>copyout</code>, which expect an TLB fault. So what&#8217;s an &#8220;valid&#8221; user space
address?</p>

<ul>
<li>User code or date segment</li>
<li>User heap, between <code>heap_start</code> and <code>heap_end</code></li>
<li>User stack</li>
</ul>


<p>If the address is invalid, then we directly return some non-zero error code, to
let the <code>badfault_func</code> capture the fault.</p>

<p>For <code>VM_FAULT_READ</code> or <code>VM_FAULT_WRITE</code>, we just walk current address space&#8217;s page
table, and see if that page actually exists (by checking the <code>PTE_P</code> bit). If no then we just
allocate a new page and modify the page table entry to insert the mapping
(since we haven&#8217;t turn on swap yet, so <strong>not exist means this is the first time
we access this page</strong>). The permissions of the newly allocated page should be
set according to the region information we stored in <code>struct addrspace</code>.
Finally we just use <code>tlb_random</code> to insert this mapping to TLB. Of course,
you can adopt some TLB algorithm here that choosing a specific TLB victim. But
<strong>only do this when you have all your VM system working.</strong></p>

<p>For <code>VM_FAULT_READONLY</code>, <strong>this page is already in memory and the mapping is
already in TLB bank</strong>, just that the Dirty bit is 0 and user try to write
this page. So <strong>we first check if user can really write this page</strong>, maybe
by the access bits in the low 12 bits of page table entry. (Recall that in
<code>as_define_region</code>, user passed in some attributes like readable, writable and
executable. You should record them down there and use them to check here).</p>

<p>If user want to write a page that he has no rights to write, then this is a
access violation. You can just panic here or more gracefully, kill current
process. But if user can actually write this page, then we first query TLB
bank to get the index of the TLB entry, set the Dirty bit of <code>entrylo</code> and write
it back use <code>tlb_write</code>. Don&#8217;t forget to change the physical page&#8217;s state to
<code>PAGE_STATE_DIRTY</code> (It&#8217;s useless now but will be useful in swapping)</p>

<p>The above are pretty much what <code>vm_fault</code> does. Three extra tips:</p>

<ul>
<li><p>Since TLB is also a shared resource, so you&#8217;d better <strong>use a lock to
protect the access to it</strong>. And it&#8217;s better be a <code>spinlock</code> since sometimes we
perform TLB operations in interrupt handler, where we don&#8217;t want to sleep.</p></li>
<li><p><strong>Do not print anything inside <code>vm_fault</code>.</strong> <code>kprintf</code> may touch some of the
TLB entry so that the TLB has been changed between the miss and <code>vm_fault</code>, which
can lead to some really weird bugs.</p></li>
<li><p><strong>Assumption is the source of all evil. Use a lot KASSET to make your
assumption explicit and check if they are right.</strong></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 sbrk System Call]]></title>
    <link href="http://jhshi.me/2012/04/27/os161-sbrk-system-call/"/>
    <updated>2012-04-27T18:17:36-04:00</updated>
    <id>http://jhshi.me/2012/04/27/os161-sbrk-system-call</id>
    <content type="html"><![CDATA[<p>If you&#8217;re not familiar with <code>sbrk</code> system call, here is <a href="http://en.wikipedia.org/wiki/Sbrk">it&#8217;s wiki</a>,
and its <a href="http://www.cs.utah.edu/flux/moss/node39.html">interface description</a>. In a nutshell,
<code>malloc</code> will use <code>sbrk</code> to get heap space.</p>

<!-- more -->


<p>In <code>as_define_region</code>, we&#8217;ve find the highest address that user text and data
segment occupy, and based on this, we&#8217;ve set the <code>heap_start</code> in <code>struct
addrspace</code>. This makes the <code>sbrk</code> system call implementation quite easy: almost
just parameter checking work. Several points:</p>

<ul>
<li><p><code>inc</code> could be negative, so make sure <code>heap_end+inc</code> >= <code>heap_start</code></p></li>
<li><p>We need to set up a limit to user&#8217;s heap size, e.g. 16MB or 32MB.
Otherwise, some application such as the test program <code>malloctest</code> will try to
malloc as much as memory as it can (~1GB), and your OS will suffer serving
these kind of programs, especially when you have only 512KB physical memory. So
we need to check <code>heap_end+inc-heap_start &lt; USER_HEAP_LIMIT</code></p></li>
<li><p>Don&#8217;t forget round up inc by 4. This is optional but can lower the chance
of unaligned pointers</p></li>
</ul>


<p>After all these checking, just return <code>heap_end</code> as a <code>void*</code> pointer and increase
<code>heap_end</code> by <code>inc</code>. Of course, like any other system calls, you need to add a
case entry in the <code>syscall</code> function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh/scp without password]]></title>
    <link href="http://jhshi.me/2012/04/27/sshscp-without-password/"/>
    <updated>2012-04-27T12:45:41-04:00</updated>
    <id>http://jhshi.me/2012/04/27/sshscp-without-password</id>
    <content type="html"><![CDATA[<p>Suppose you have two machines: A and B. A is your work machine, you do most of
your work on it. But B is a little special (e.g., connected to some specific
hardware) that you need to ssh on it or copy some file from A to B from time to
time. Here is the way that you can get rid of entering passwords every time you
do ssh/scp.</p>

<!-- more -->


<p>First, on machine A, generate a DSA key pair:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key <span class="o">(</span>YOUR_HOME/.ssh/id_rsa<span class="o">)</span>:
</span><span class='line'><span class="c"># press ENTER here to accept the default filename </span>
</span><span class='line'>Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>:
</span><span class='line'><span class="c"># press ENTER here to use no passphrase, otherwise, you still need</span>
</span><span class='line'><span class="c"># to enter this passphrase when ssh </span>
</span><span class='line'>Enter same passphrase again:
</span><span class='line'><span class="c"># press ENTER here </span>
</span><span class='line'>Your identification has been saved in <span class="nv">$HOME</span>/.ssh/id_rsa.
</span><span class='line'>Your public key has been saved in <span class="nv">$HOME</span>/.ssh/id_rsa.pub.
</span><span class='line'>The key fingerprint is: ..... <span class="o">(</span>omited<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, change the access mode of .ssh directory</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod 775 ~/.ssh
</span></code></pre></td></tr></table></div></figure>


<p>Then append the content of your just generated <code>id_rsa.pub</code> to the
<code>$HOME/.ssh/authorized_keys</code> file on machine B:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># copy the id_rsa.pub file to host B </span>
</span><span class='line'><span class="nv">$ </span>scp ~/.ssh/id_rsa.pub b@B:.
</span><span class='line'><span class="c"># login to B </span>
</span><span class='line'><span class="nv">$ </span>ssh b@B
</span><span class='line'><span class="c"># append the content to authorized_keys </span>
</span><span class='line'><span class="nv">$ </span>cat id_rsa.pub &gt;&gt; .ssh/authorized_keys
</span></code></pre></td></tr></table></div></figure>


<p>Finally, ssh on to B and change the access mode of the file <code>authorized_keys</code>.
This is optional, maybe you don&#8217;t need to do this if you can already ssh
without entering password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh b@B
</span><span class='line'><span class="nv">$ </span>chmod 700 .ssh
</span><span class='line'><span class="nv">$ </span>chmod 640 ~/.ssh/authorized_keys
</span></code></pre></td></tr></table></div></figure>


<p>Depend on your version of ssh, you may also need to do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh b@B <span class="nv">$ </span>cp ~/.ssh/authorized_keys ~/.ssh/authorized_keys2
</span></code></pre></td></tr></table></div></figure>


<p>That it! Enjoy!</p>

<p><strong>Reference</strong></p>

<ul>
<li><p><a href="http://www.cyberciti.biz/faq/ssh-password-less-login-with-dsa-publickey-authentication/">http://www.cyberciti.biz/faq/ssh-password-less-login-with-dsa-publickey-authentication/</a></p></li>
<li><p><a href="http://www.linuxproblem.org/art_9.html">http://www.linuxproblem.org/art_9.html</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
