<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag:pid | Pearls in Life]]></title>
  <link href="http://jhshi.me/tag/pid/atom.xml" rel="self"/>
  <link href="http://jhshi.me/"/>
  <updated>2013-04-04T18:36:39-04:00</updated>
  <id>http://jhshi.me/</id>
  <author>
    <name><![CDATA[Jinghao Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS161 pid Management]]></title>
    <link href="http://jhshi.me/2012/03/12/os161-pid-management/"/>
    <updated>2012-03-12T11:13:54-04:00</updated>
    <id>http://jhshi.me/2012/03/12/os161-pid-management</id>
    <content type="html"><![CDATA[<p>There are many way to manage each process's pid. Here is the way I do it.</p>

<p>I decided to make minimal modification to <code>$OS161_SRC/kern/thread/thread.c</code>,
in case anything is ruined. So I only add two things to the thread module. One
is I add a <code>t_pid</code> field to <code>struct thread</code> so that <code>getpid</code> system call is
trivial. Another is I add a call of <code>pid_alloc</code> in <code>thread_alloc</code> to initialize
new thread's <code>t_pid</code>. That's it. No more touch on the thread module.</p>

<!-- more -->


<h3>The process Structure</h3>

<p>In os161, we stick to the 1:1 process:thread model. That is, a process has and
only has one thread. Thus process and thread are basically the same thing in
this scenario. However, I still decided to use a <code>struct process</code> to do process
bookkeeping stuff. It's independent to <code>struct thread</code> and outside the thread
module. Thus when a thread exits and its <code>thread</code> structure is destroyed. I
still have its meta-data (e.g. exitcode) stored in the <code>process</code> structure.</p>

<p>So, what should we record about a process? As we already have the <code>struct
thread</code> to record most of the information about a thread, we just use a pointer
to <code>struct thread</code> to get all these information. What we do in <code>struct process</code>
is mainly for our <code>waitpid</code> and <code>exit</code> system call. So we should keep the
information of:</p>

<ul>
<li><p>Its parent's (if any) pid</p></li>
<li><p>Whether a process has exited</p></li>
<li><p>If this process has exited, then the exitcode</p></li>
<li><p>Synchronous facilities to protect the exit status (lock, cv, samophore, etc)</p></li>
<li><p>Of course a pointer to <code>struct thread</code></p></li>
</ul>


<p>So the structure looks like:</p>

<p>```c
struct process {</p>

<pre><code>pid_t ppid; 
struct semphore* exitsem; 
bool exited; 
int exitcode; 
struct thread* self; 
</code></pre>

<p>};
```</p>

<h3>Pid allocation</h3>

<p>For convenience and simplicity, I decided to support a maximum number of
<code>MAX_RUNNING_PROCS (256)</code> processes in the OS, regardless the <code>__PID_MAX (32767)</code>
macro in <code>$OS161_SRC/kern/inlude/kern/limits.h</code>. So I just use a global static
array of <code>struct process*</code> to maintain all the processes in system. Of course
it's very dumb but hope it's sufficient for a toy OS like 161.</p>

<p>Then allocate a pid is very easy, just scan the process array and find a
available slot (<code>NULL</code>). One important thing to note is that leave <code>pid=0</code>
alone and do not use it. Since in <code>/kern/include/kern/wait.h</code>, there are two
special MACROs:</p>

<p>```</p>

<h1>define WAIT_ANY (-1)</h1>

<h1>define WAIT_MYPGRP (0)</h1>

<p>```</p>

<p>That is, pid = 0 has a special meaning. So we'd better not use it, staring
allocate pid from 1. We can also see this from the <code>__PID_MIN (2)</code> macro in
<code>$OS161_SRC/kern/inlude/kern/limits.h</code>.</p>

<p>Once a available slot is found, we need to create a <code>struct process</code> and
initialize it appropriately, especially it's ppid (-1 or other invalid value).</p>
]]></content>
  </entry>
  
</feed>
