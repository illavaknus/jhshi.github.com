<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag:coremap | Pearls in Life]]></title>
  <link href="http://jhshi.me/tag/coremap/atom.xml" rel="self"/>
  <link href="http://jhshi.me/"/>
  <updated>2013-04-05T14:19:28-04:00</updated>
  <id>http://jhshi.me/</id>
  <author>
    <name><![CDATA[Jinghao Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS161 Physical Page Management]]></title>
    <link href="http://jhshi.me/2012/04/24/os161-physical-page-management/"/>
    <updated>2012-04-24T18:11:05-04:00</updated>
    <id>http://jhshi.me/2012/04/24/os161-physical-page-management</id>
    <content type="html"><![CDATA[<p>We'll talk about <code>page_alloc</code>, <code>page_free</code>, <code>alloc_kpages</code> and <code>free_kpages</code>.</p>

<!-- more -->


<h3>Allocate one single physical page with <code>page_alloc</code></h3>

<p>This is relatively easy once you've decided which paging algorithm to use. FIFO
seems good enough in in terms of simplicity as well as acceptable performance.
We just scan the coremap, find out if there is any FREE page, or find out the
oldest page. At this stage (before swapping), I will use a magic function
called <code>MAKE_PAGE_AVAIL</code>, which obviously makes a page available, by flushing or
swapping, we don't care :-). Once we find a victim (maybe free, clean, or
dirty, but <strong>must not be fixed</strong>), we call <code>MAKE_PAGE_AVAIL</code> on it, and update
it's internal fields like time stamp, <code>as</code>, <code>va</code>, etc. And don't forget to zero the
page before we return.</p>

<p>A trade-off here is what parameters should we pass to <code>page_alloc</code>? One
choice is nothing: I just tell you to give me a page, and I'll deal with
the page meta-info by myself. But this manner will probably cause page-info
inconsistency, e.g., caller forget to set page's state. So to avoid this case,
I prefer caller tell <code>page_alloc</code> all he needs, like <code>as</code>, <code>va</code>, whether the
allocate page need to keep in memory, etc. And let <code>page_alloc</code> set the page's
meta info accordingly.</p>

<p>BTW, since coremap is a globally share data structure, so <strong>you really want to
use lock to protect it every time you read/write it.</strong></p>

<h3>Allocate n continuous pages with <code>page_nalloc</code></h3>

<p>Since kernel address will bypass TLB and are directly-mapped. (See
<a href="http://www.eecs.harvard.edu/~mdw/course/cs161/handouts/mips.html#segments">this</a> and <a href="http://cgi.cse.unsw.edu.au/~cs3231/10s1/os161/man/sys161/mips.html">this</a> for details), when we're asked to allocate
n (where n > 1) pages by <code>alloc_kpages</code>, we must <strong>allocate n continuous pages</strong>!
To do this, we need to first find a chunk of n available (i.e., not fixed) continuous
pages, and then call <code>MAKE_PAGE_AVAILABLE</code> on these pages. Like <code>page_alloc</code>, we
also need to update the coremap and zero the allocated memory.</p>

<p>As mentioned in <a href="/2012-04-24-os161-coremap">my previous blog about coremap</a>, in <code>alloc_kpages</code>,
<strong>we need to first check whether vm has bootstrapped</strong>: if not, we just use
<code>get_ppages</code>, otherwise, we use our powerful <code>page_nalloc</code>.</p>

<p>Also, we need to record how many pages we allocated so that when calling <code>free_kpages</code>,
we can free all these <code>npages</code>page.</p>

<h3>Free a page with <code>page_free</code> and <code>free_kpages</code></h3>

<p>We just need to mark this page as FREE. But if this page was mapped to user
address space (<code>page-&gt;as != NULL</code>), then we need first unmap it, and shoot down
the TLB entry if needed. We'll talk about user address space management lately.</p>

<p>Only one tip for this part, <strong>do not forget to protect every access to coremap
using lock (but not spinlock).</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Coremap]]></title>
    <link href="http://jhshi.me/2012/04/24/os161-coremap/"/>
    <updated>2012-04-24T17:35:28-04:00</updated>
    <id>http://jhshi.me/2012/04/24/os161-coremap</id>
    <content type="html"><![CDATA[<p>The first concern of OS161 virtual memory system is how to manage physical
pages. Generally, we can pack a physical page's information into a structure
(called <code>struct page</code>) and <strong>use this struct to represent a physical page</strong>.
<strong>We use an array of <code>struct page</code> to keep all physical pages information.</strong>
This array, aka, <strong>coremap</strong>, will be the most important data structure in this lab.</p>

<!-- more -->


<h3>What should we store in page structure?</h3>

<p>For each physical page, we want to know:</p>

<ul>
<li><p>Where is this page mapped?</p></li>
<li><p>What's this pages status? (free, clean, dirty...)</p></li>
<li><p>Other info (e.g. need by paging algorithm)</p></li>
</ul>


<p>So the definition of <code>struct page</code> may look like this:</p>

<p>```
struct page {</p>

<pre><code>/* where is paged mapped to */
struct addrspace* as; 
vaddr_t va;

/* page state */ 
page_state_t state;

/* for paging algorithm 
 * I use FIFO paging, so a timestamp will be suffice    
 */
uint64_t timestamp; 
</code></pre>

<p>};
```</p>

<p>A page can have for different states, as shown below.</p>

<p>{% img center /images/2012-04-24-page-state.png %}</p>

<p>This diagram is quite clear. Several points though:</p>

<ul>
<li><p>Once a physical page is allocated, its state is DIRTY, not CLEAN. Since this
page do not have a copy in swap file (disk). Remember that in a virtual memory
system, memory is just a cache of disk.</p></li>
<li><p>For some reason, we may want to always keep a certain page in memory, e.g.</p>

<ul>
<li>kernel pages, since these pages are direct mapped</li>
<li>user stack and code segment pages which we already knew will be frequently accessed.</li>
</ul>


<p>So we have a special state called "fixed", means that <strong>we'll never swap out these
pages to disk</strong>.</p></li>
</ul>


<h3>Coremap Initialization</h3>

<p>We need to initiate our coremap in <code>vm_bootstrap</code>. First, we need to find out
how many physical pages in system. We can do this using <code>ram_getsize</code>. There
is a big trick here. Since we will only know the physical page number, i.e.
coremap array length at runtime, so we'd better just define a <code>struct page</code>
pointer and allocate the actually array at runtime after we got the physical
page number, rather than use a statically defined array with some MACRO like
<code>MAX_PHY_PAGE_NUM</code>. So at first glance, we may write:</p>

<p><code>
paddr_t firstaddr, lastaddr;
ram_getsize(&amp;firstaddr, &amp;lastaddr);
page_num = ROUNDDOWN(lastaddr, PAGE_SIZE) / PAGE_SIZE;
pages =(struct page*) kmalloc(page_num * sizeof(struct page));
</code></p>

<p><strong>But the above code will definitly fail</strong>.</p>

<p>Take a look at <code>ram_getsize</code>,
we can see that this function will destroy its <code>firstaddr</code> and <code>lastaddr</code>
before return. So after that, if we call <code>kmalloc</code>, which call <code>alloc_kpage</code>,
<code>get_ppages</code> and <code>ram_stealmem</code> to get memory, <code>ram_stealmem</code> will fail. The
contradiction is: <strong>we need to call <code>ram_getsize</code> to get physical page number
so that we can allocate our coremap(<code>pages</code>), but once we call <code>ram_getsize</code> we
will not be able allocate any pages!</strong></p>

<p>To resolve this contradiction, on one hand, we should <strong>initialize all other
data structures, e.g., locks, before we call <code>ram_getsize</code></strong>. Then we call
<code>ram_getsize</code> to get <code>firstaddr</code> and <code>lastaddr</code>. After that, instead of using
<code>kmalloc</code>, we must <strong>allocate our coremap manually</strong>, without invoking any
other malloc routines. A possible solution may be:</p>

<p><code>
ram_getsize(&amp;firstaddr, &amp;lastaddr);
page_num = ROUNDDOWN(lastaddr, PAGE_SIZE) / PAGE_SIZE;
/* pages should be a kernel virtual address !!  */
pages = (struct page*)PADDR_TO_KVADDR(firstaddr);
freeaddr = firstaddr + page_num * sizeof(struct page);
</code></p>

<p>Now we allocated our core map just between <code>firstaddr</code> and <code>freeaddr</code>, and
[<code>freeaddr</code>, <code>lastaddr</code>] will be system's free memory.</p>

<p>Then we initialize the <code>pages</code> array, we need to mark any pages between [0,
<code>freeaddr</code>) as fixed, since this memory contains important kernel code and
data, or memory mapped I/Os. And we just mark pages between [<code>freeaddr</code>,
<code>astaddr</code>] as free.</p>

<p>At the end of <code>vm_bootstrap</code>, we may want to <strong>set some flags to indicate that
vm has already bootstrapped,</strong> since functions like <code>alloc_kpages</code> may call
different routines to get physical page before and after <code>vm_bootstrap</code>.</p>
]]></content>
  </entry>
  
</feed>
