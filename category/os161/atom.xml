<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os161 | Pearls in Life]]></title>
  <link href="http://jhshi.me/category/os161/atom.xml" rel="self"/>
  <link href="http://jhshi.me/"/>
  <updated>2013-04-05T17:14:48-04:00</updated>
  <id>http://jhshi.me/</id>
  <author>
    <name><![CDATA[Jinghao Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS161 Synchronization Primitives: RWLock]]></title>
    <link href="http://jhshi.me/2013/04/05/os161-synchronization-primitives-rwlock/"/>
    <updated>2013-04-05T13:30:00-04:00</updated>
    <id>http://jhshi.me/2013/04/05/os161-synchronization-primitives-rwlock</id>
    <content type="html"><![CDATA[<p>The idea of <a href="http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock">Reader-Writer Lock</a> is quite simple. In normal <a href="/2013/04/04/os161-synchronization-primitives-lock">lock</a>,
we don't differentiate the threads. That said, each thread who wants to enter the
critical section must first acquire the lock. But on a second thought, you may
find that threads actually have different behavior inside the critical section:
some threads just want to see the values of shared variable, while others really
want to update those variables.</p>

<!-- more -->


<h3>An Example</h3>

<p>Suppose we have a book database in a library, each reader who wants to query the
database must first acquire the lock before he can actually do the query. The
library manager, who wants to update some book info also need to acquire the
lock before he can do the actual update. In this case, we can see that the
queries of multiple readers in fact have no conflict. So ideally they should be
allowed to be in the critical section at the same time. On the other hand, the
library manager must have exclusive access to the database while he's updating.
No readers, no other managers can enter the critical section until the first
manager leaves.</p>

<p>So, two rules for rwlock:</p>

<ol>
<li>Multiple readers can in the critical section at the same time</li>
<li>One and only one writers can in the critical section at any time</li>
</ol>


<h3>Starvation</h3>

<p>Suppose the coming sequence of threads are "RWRRRRR...", in which R denotes reader
and W denotes writer. The first reader arrives, and found no one in the critical
section, and he happily comes in. Before he leaves, the writer arrives, but
found there is a reader inside the critical section, so the writer wait. While
the write is waiting, the second reader comes and find there is one reader
inside the critical section, literally, it's OK for him to come in according to
the rules, right? The same case applies to the third, forth,..., readers.</p>

<p>So without special attention, we see readers come and go, while the poor writer
keeps waiting, for virtually a "unbounded" time. In this case, the writer is
starved.</p>

<p>The thing is, the second, third, forth..., readers shouldn't enter critical section
since there is a write waiting before them!</p>

<h3>Implementation</h3>

<p>There are many ways to implement rwlock. You can use any of the semaphore, cv or
lock. Here I introduce one using semaphore and lock. It's very simple, yet has
the limitation that only support support at most a  certain number of readers in
the critical section.</p>

<p>Let's imagine the critical section as a set of resources. The initial capacity
is <code>MAX_READERS</code>. The idea is each reader needs one of these resources to enter
the critical section, while each writer needs all of these resources (to prevent other
readers or writers) to enter.</p>

<p>To let the readers be aware of the waiting writers, each thread should first
acquire a lock before he can acquire the resource.</p>

<p>So for <code>rwlock_acquire_read</code>:</p>

<ol>
<li>Acquire the lock</li>
<li>Acquire a resource using <code>P</code></li>
<li>Release the lock</li>
</ol>


<p>For <code>rwlock_release_read</code>, just release the resource using <code>V</code>.</p>

<p>In <code>rwlock_acquire_write</code>:</p>

<ol>
<li>Acquire the lock, so that no other readers/writer would be able to acquire
the rwlock</li>
<li>Acquire <strong>ALL</strong> the resources by doing <code>P</code> <code>MAX_READERS</code> times</li>
<li>Release the lock. It's safe now since we got all the resources.</li>
</ol>


<p>For <code>rwlock_release_write</code>, just release all the resources.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Synchronization Primitives: CV]]></title>
    <link href="http://jhshi.me/2013/04/05/os161-synchronization-primitives-cv/"/>
    <updated>2013-04-05T12:37:00-04:00</updated>
    <id>http://jhshi.me/2013/04/05/os161-synchronization-primitives-cv</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Monitor_(synchronization)">Condition variable</a> is used for a thread to wait for some condition to be
true before continuing. The implementation is quite simple compared to
<a href="/2013/04/04/os161-synchronization-primitives-lock">lock</a>, yet the difficult part is to understand how a CV is supposed to
used.</p>

<!-- more -->


<h3>CV Interface</h3>

<p>Condition variable has two interfaces: <code>cv_wait</code> and <code>cv_signal</code>. <code>cv_wait</code> is
used to wait for a condition to be true, and <code>cv_signal</code> is used to notify other
threads that a certain condition is true.</p>

<p>So what?</p>

<p>Let's consider a producer-consumer case, where a bunch of threads share a
resource pool, some of them (producer) is responsible to put stuff to the pool
and others (consumer) are responsible to take stuff from the pool. Obviously, we
have two rules.</p>

<ol>
<li>If the pool is full, then producers can not put to the pool</li>
<li>If the pool is empty, then consumers can not take stuff from the pool</li>
</ol>


<p>And we use two condition variables for each of these rules: <code>pool_full</code> and
<code>pool_empty</code>. Here is the pseudo code for producer and consumer:</p>

<p>```c
void producer(void) {</p>

<pre><code>lock_acquire(pool_lock);
while (pool_is_full) {
    cv_wait(pool_full, pool_lock);
}
produce();
/* notify that the pool now is not empty, so if any one is waiting
 * on the pool_empty cv, wake them up 
 */
cv_signal(pool_empty, pool_lock);
lock_release(pool_lock);
</code></pre>

<p>}</p>

<p>void consumer(void) {</p>

<pre><code>lock_acquire(pool_lock);
while (pool_is_empty) {
    cv_wait(pool_empty, pool_lock);
}
consume();
/* notify that the pool now is not full, so if any one is waiting
 * on the pool_full cv, wake them up 
 */

cv_signal(pool_full, pool_lock);
lock_release(pool_lock);
</code></pre>

<p>}
```</p>

<p>Here we also use a lock to protect access to the pool. We can see from this
example:</p>

<ol>
<li>Condition variable is virtually a wait channel</li>
<li>Condition variable is normally used together with lock, but <strong>condition
variable itself doesn't contain a lock</strong></li>
</ol>


<h3>What's in <code>cv</code> structure?</h3>

<p>Obviously, we need a wait channel. And that's it (probably plus a <code>cv_name</code>).</p>

<h3><code>cv_wait</code> and <code>cv_signal</code></h3>

<p>Now let's get to business. The comment in <code>$OS161_SRC/kern/inlucde/synch.h</code>
basically told you everything you need to do.</p>

<p>In <code>cv_wait</code>, we need to:</p>

<ol>
<li>Lock the wait channel</li>
<li>Release the lock passed in</li>
<li>Sleep on the wait channel</li>
<li>When waked up, re-acquire the lock.</li>
</ol>


<p>So before <code>cv_wait</code>, we should already hold the lock (so that we can release
it). And after <code>cv_wait</code>, we still hold the lock.</p>

<p>In <code>cv_signal</code>, we just wake up somebody in the wait channel using
<code>wchan_wakeone</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Synchronization Primitives: Lock]]></title>
    <link href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-lock/"/>
    <updated>2013-04-04T15:23:00-04:00</updated>
    <id>http://jhshi.me/2013/04/04/os161-synchronization-primitives-lock</id>
    <content type="html"><![CDATA[<p>Lock is basically just a semaphore whose initial counter is 1. <code>lock_acquire</code> is
like <code>P</code>, while <code>lock_release</code> is like <code>V</code>. You probably want to go over
<a href="/2013/04/04/os161-synchronization-primitives-semaphore">my previous post about semaphore</a></p>

<!-- more -->


<h3>Lock's holder</h3>

<p>However, since only one can hold the lock at any given time, that guy is
considered to be the <strong>holder</strong> of this lock. While in semaphore, we don't have
such a holder concept since multiple thread can "hold" the semaphore at the same
time.</p>

<p>Thus we need to store the holder information in our lock structure, along with the
conventional spin lock and wait channel. Intuitively, you may tempted to use the
thread name (<code>curthread-&gt;t_name</code>) as the thread's identifier. Nevertheless, same
with the case in real world, the thread's name isn't necessarily unique. The
OS161 doesn't forbidden us to create a bunch of threads with the same name.</p>

<p>There is a global variable defined in <code>$OS161_SRC/kern/include/current.h</code> named
<code>curthread</code>, which is a pointer to the kernel data structure of current thread.
Two different threads definitely have different thread structures, which makes
it a good enough thread identifier.</p>

<h3>Reentrant Lock</h3>

<p>Another trick thing is to decide whether we support <a href="http://en.wikipedia.org/wiki/Reentrant_mutex">reentrant lock</a> or not.
Basically, a process can acquire a reentrant lock multiple times without
blocking itself.</p>

<p>At first glance, you may wonder what kind of dumb thread would acquire a lock
multiple times anyway? Well, that kind of thread does exist, and they may not be
dumb at all. Reentrant lock is useful when it's difficult for a thread to track
whether it has grabbed the lock. Suppose we have multiple threads that traverse
a graph simultaneously, and each thread need to first grab the lock of a node
before it can visit that node. If the graph has a circle or there are multiple
paths leads to the same node, then it's possible that a thread visit the same
node twice. Although there is a function named <code>lock_do_i_hold</code> that can tell
whether a thread holds a lock or not, unfortunately it's not a public interface of lock.</p>

<p>In OS161, it's OK that you choose to not support reentrant lock, so when you
detect a thread try to acquire a lock while it's the lock's holder, just panic.
But if you want to support reentrant lock, <strong>you need to make sure a thread won't
accidentally loose a lock.</strong> For example,</p>

<p>```c
void A(void) {</p>

<pre><code>lock_acquire(lock1);

B();

lock_release(lock1);
</code></pre>

<p>}</p>

<p>void B(void) {</p>

<pre><code>lock_acquire(lock1);

printf("Hello world!");

lock_release(lock1);
</code></pre>

<p>}
```</p>

<p>In this case, the thread is supposed to still hold the lock <strong>after</strong> B
returns.</p>

<p>The simplest way would be, keep a counter (initial value 0) for each lock. When
a thread acquires a lock, increase that counter. When it release the lock, decrease
the counter, only actually release a lock when the counter reaches 0.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161 Synchronization Primitives: Semaphore]]></title>
    <link href="http://jhshi.me/2013/04/04/os161-synchronization-primitives-semaphore/"/>
    <updated>2013-04-04T14:52:00-04:00</updated>
    <id>http://jhshi.me/2013/04/04/os161-synchronization-primitives-semaphore</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Semaphore_(programming)">Semaphore</a> denotes a certain number of shared resources. Basically, it's
one counter and two operations on this counter, namely <code>P</code> and <code>V</code>. <code>P</code> is used
to acquire one resource (thus decrementing the counter) while <code>V</code> is used to
release one resource (thus incrementing the counter).</p>

<!-- more -->


<h3>A Metaphor</h3>

<p>My favorite example is the printer. Say we have three printers in a big lab,
where everybody in the lab shared those printers. Obviously only one printing
job can be conducted by one printer at any time, otherwise, the printed content
would be messed up.</p>

<p>However, we can not use a single lock to protect the access of all these three
printers. It'll be very dumb. An intuitive way is to use three locks, one for
each printer. Yet more elegantly, we use a semaphore with initial counter as 3.
Every time before a user submit a print job, he need to first <code>P</code> this semaphore
to acquire one printer. And after he is done, he need to <code>V</code> this semaphore to
release the printer. If there is already one print job at each printer, then the
following poor guys who want to <code>P</code> this semaphore would have to wait.</p>

<h3>What should a semaphore structure contain?</h3>

<p>Apparently, we need an <strong>counter</strong> to record how many resources available. Since
this counter is a shared variable, we need a <strong>lock</strong> to protect it. At this point,
we only have the <code>spinlock</code> provided in <code>$OS161_SRC/kern/include/spinlock.h</code>.
That's fine since our critical section is short anyway. In order to let the poor
guys have a place to wait, we also need an <strong>wait channel</strong> (in
<code>OS161_SRC/kern/include/wchan.h</code>)</p>

<h3><code>P</code> Operation</h3>

<p>The flow of <code>P</code> would be:</p>

<ol>
<li>Acquire the spin lock</li>
<li>Check if there are some resources available (<code>counter &gt; 0</code>)</li>
<li>If yes, we're lucky. Happily go to step 8.</li>
<li>If no, then we first grab the lock of the wait channel, since the wait
channel is also shared.</li>
<li>Release the spin lock, and wait on the wait channel by calling <code>wchan_sleep</code></li>
<li>We're sleeping...</li>
<li>After wake up, first grab the spin lock, and go to step 2</li>
<li>At this point, the <code>counter</code> should be positive, decrement it by 1</li>
<li>Release the spin lock, and return</li>
</ol>


<h3><code>V</code> Operation</h3>

<p><code>V</code> is much simpler compared to <code>P</code>. The flow is:</p>

<ol>
<li>Acquire the spin lock</li>
<li>Increment the <code>counter</code> by 1</li>
<li>Wake up some poor guy in the wait channel by calling <code>wchan_wakeone</code>)</li>
<li>Release the spin lock and return</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console Input Messed up in OS161]]></title>
    <link href="http://jhshi.me/2013/03/15/console-input-messed-up-in-os161/"/>
    <updated>2013-03-15T00:26:57-04:00</updated>
    <id>http://jhshi.me/2013/03/15/console-input-messed-up-in-os161</id>
    <content type="html"><![CDATA[<p>When you finished the process system call (e.g., <code>fork</code>, <code>execv</code>) and test your
system call by executing some user program, you'll probably find that the
console input behavior is messed up.</p>

<!-- more -->


<p>For example, when you executing user shell from OS161 kernel menu, and then
executing <code>/bin/true</code> from the shell, you may see this</p>

<p><code>bash
OS/161 kernel [? for menu]: s
Operation took 0.000285120 seconds
OS/161 kernel [? for menu]: (program name unknown): Timing enabled.
OS/161$ /bin/true
(program name unknown): bntu: No such file or directory
(program name unknown): subprocess time: 0.063300440 seconds
Exit 1
</code></p>

<p>In this case, the shell program only receive the input "bnut" instead of your
input (<code>/bin/true</code>).</p>

<p>To find out why, we need to dig into how kernel menu (<code>$OS161_SRC/kern/startup/menu.c</code>)
works a little bit. When you hit "s" in the kernel menu. What happens?</p>

<ol>
<li><p><code>cmd_dispatch</code> will look up the <code>cmd_table</code> and call <code>cmd_shell</code></p></li>
<li><p><code>cmd_shell</code> just call <code>common_prog</code> with the shell path argument</p></li>
<li><p><code>common_prog</code> will first create a child thread with the start function
<code>cmd_progthread</code>, then return</p></li>
<li><p>In the child thread, <code>cmd_progthread</code> will try to run the actual program
(in our case, the shell)</p></li>
</ol>


<p>Note that the shell program is run in a separate child thread, and the parent
thread (i.e., the menu thread) will continue to run after he "forked" the child
thread.</p>

<p>So now there are actually two thread that want to read console input, which
leads to race condition. This is why the shell program receive corrupted input:
the menu thread eaten some of the inputs!</p>

<p>To solve this problem, we need to let the menu thread wait for the child
thread to complete, then return. So what we need to do is in <code>common_prog</code>, we
need to do a <code>waitpid</code> operation after we call <code>thread_fork</code>. And at the end of
<code>cmd_progthread</code>, we need to explicitly call <code>exit</code> with proper exit code in
case the user program doesn't do this.</p>

<p>Also note that <code>waitpid</code> and <code>exit</code> are in fact user land system call, and we can
not directly call them in kernel, so you may need to make some "shortcuts" in
your system call implementation to let the kernel be able to call <code>sys_waitpid</code>
and <code>sys_exit</code>.</p>
]]></content>
  </entry>
  
</feed>
